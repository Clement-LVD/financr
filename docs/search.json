[{"path":"https://clement-lvd.github.io/financr/articles/currencies.html","id":"get_changes-get_changes_historic","dir":"Articles","previous_headings":"","what":"get_changes() & get_changes_historic()","title":"Currency-related functions","text":"get_changes() fetch latest exchange rate, given currencies symbols : get historic exchange rates, given currencies symbols : Currencies indicated syntax across get_changes_historic() get_changes(), converting ‘USD’ default. E.g., pass named list character vectors, two separate lists equal length. Range Interval Parameters. Default 1 row per day 1-year period ‘interval’ ‘range’ parameters indicated. E.g., retrieve one observation per month five-year period.","code":"library(financr)  changes <- get_changes(from = c(\"RON\", \"USD\"), to = \"EUR\")  changes[ , c(\"from\", \"to\",  \"regularmarketprice\", \"currency\", \"timestamp\")] #>   from  to regularmarketprice currency           timestamp #> 1  RON EUR             0.2004      EUR 2025-04-08 22:43:34 #> 2  USD EUR             0.9135      EUR 2025-04-08 22:44:34 changes <- get_changes_historic(from = c(\"EUR\", \"RON\") )  str(changes) #> 'data.frame':    264 obs. of  7 variables: #>  $ timestamp: POSIXct, format: \"2024-04-08 01:00:00\" \"2024-04-09 01:00:00\" ... #>  $ close    : num  0.923 0.921 0.921 0.931 0.932 ... #>  $ high     : num  0.924 0.922 0.932 0.935 0.941 ... #>  $ low      : num  0.921 0.919 0.92 0.93 0.932 ... #>  $ open     : num  0.923 0.921 0.921 0.931 0.932 ... #>  $ from     : chr  \"EUR\" \"EUR\" \"EUR\" \"EUR\" ... #>  $ to       : chr  \"USD\" \"USD\" \"USD\" \"USD\" ... #>  - attr(*, \"n.currencies\")= int 3 #>  - attr(*, \"currencies\")= chr [1:3] \"EUR\" \"RON\" \"USD\" #>  - attr(*, \"exchange\")= chr [1:2] \"EUR => USD\" \"RON => USD\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-08\" #>  - attr(*, \"crypto\")= logi FALSE #>  - attr(*, \"date.begin\")= POSIXct[1:1], format: \"2024-04-08 01:00:00\" #>  - attr(*, \"date.end\")= POSIXct[1:1], format: \"2025-04-08 22:45:27\" #>  - attr(*, \"date.dif\")= num 366 df2_days <- get_changes_historic(from = c(\"EUR\" = \"RON\", \"USD\" = \"EUR\"))   same_as_df2_days <- get_changes_historic(from = c(\"EUR\", \"USD\"), to =c(\"RON\" , \"EUR\")) df_month <- get_changes_historic(   from = c(\"EUR\", \"JPY\")   , interval = \"1mo\", range = '5y')  str(df_month) #> 'data.frame':    122 obs. of  7 variables: #>  $ timestamp: POSIXct, format: \"2020-05-01 01:00:00\" \"2020-06-01 01:00:00\" ... #>  $ open     : num  0.914 0.9 0.89 0.849 0.838 ... #>  $ high     : num  0.929 0.901 0.894 0.855 0.861 ... #>  $ low      : num  0.897 0.877 0.84 0.836 0.833 ... #>  $ close    : num  0.901 0.889 0.842 0.839 0.852 ... #>  $ from     : chr  \"EUR\" \"EUR\" \"EUR\" \"EUR\" ... #>  $ to       : chr  \"USD\" \"USD\" \"USD\" \"USD\" ... #>  - attr(*, \"n.currencies\")= int 3 #>  - attr(*, \"currencies\")= chr [1:3] \"EUR\" \"JPY\" \"USD\" #>  - attr(*, \"exchange\")= chr [1:2] \"EUR => USD\" \"JPY => USD\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-08\" #>  - attr(*, \"crypto\")= logi FALSE #>  - attr(*, \"date.begin\")= POSIXct[1:1], format: \"2020-05-01 01:00:00\" #>  - attr(*, \"date.end\")= POSIXct[1:1], format: \"2025-04-08 22:45:30\" #>  - attr(*, \"date.dif\")= num 1804"},{"path":"https://clement-lvd.github.io/financr/articles/currencies.html","id":"last_currencies","dir":"Articles","previous_headings":"","what":"last_currencies()","title":"Currency-related functions","text":"Get data.frame currencies symbols names. helpful understand currency symbols used Yahoo Finance API, found currency column data.frame returned get_historic(). Parameters. Add latest market values (‘USD’) currency ‘add_usd_values’ parameter, /filter symbols ‘keep’ parameter (case insensitive). Hereafter filter results regular expression.","code":"currencies <- last_currencies() str(currencies) #> 'data.frame':    159 obs. of  4 variables: #>  $ shortname    : chr  \"FJD\" \"MXN\" \"SCR\" \"CDF\" ... #>  $ longname     : chr  \"Fijian Dollar\" \"Mexican Peso\" \"Seychellois Rupee\" \"Congolese Franc\" ... #>  $ symbol       : chr  \"FJD\" \"MXN\" \"SCR\" \"CDF\" ... #>  $ locallongname: chr  \"Fijian Dollar\" \"Mexican Peso\" \"Seychellois Rupee\" \"Congolese Franc\" ... #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-08\" #>  - attr(*, \"crypto\")= logi FALSE few_currencies <- last_currencies(keep = c(\"R.N\",  \"^Z\")                                   , get_changes = T ) few_currencies #>   symbol shortname           longname      locallongname currency exchangename #> 1    RON       RON       Romanian Leu       Romanian Leu      USD          CCY #> 2    ZAR       ZAR South African Rand South African Rand      USD          CCY #> 3    ZMW       ZMW                ZMW                ZMW      USD          CCY #>   instrumenttype      firsttradedate gmtoffset timezone exchangetimezonename #> 1       CURRENCY 2005-07-01 01:00:00      3600      BST        Europe/London #> 2       CURRENCY 2003-12-01 01:00:00      3600      BST        Europe/London #> 3       CURRENCY 2013-01-03 01:00:00      3600      BST        Europe/London #>   regularmarketprice regularmarketdayhigh regularmarketdaylow fiftytwoweekhigh #> 1             0.2200               0.2212              0.2188           0.2258 #> 2             0.0506               0.0518              0.0506           0.0673 #> 3             0.0357               0.0360              0.0356           0.0418 #>   fiftytwoweeklow previousclose regular_timezone  to           timestamp #> 1          0.2048        0.2194              BST USD 2025-04-08 22:45:27 #> 2          0.0506        0.0510              BST USD 2025-04-08 22:45:30 #> 3          0.0345        0.0357              BST USD 2025-04-08 21:57:20"},{"path":"https://clement-lvd.github.io/financr/articles/Functions_summary.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Summary of Functions","text":"Source. Yahoo Finance used consistently data source across package. Inputs. function expects specific type input, based prefix. Outputs. 'financr' functions return standardized data.frame, see last section ‘Return Conventions’. Functions '_historic' suffix return historic financial data, others retrieve latest financial data.","code":""},{"path":"https://clement-lvd.github.io/financr/articles/Functions_summary.html","id":"details","dir":"Articles","previous_headings":"","what":"Details","title":"Summary of Functions","text":"search_ family. Functions prefix 'search_' retrieve latest data expect free-text input(s). Source : Yahoo Finance API (https://query2.finance.yahoo.com) get_ family. Functions prefix 'get_' retrieve historical latest financial values, given financial symbol(s) Source : Yahoo Finance API (https://query2.finance.yahoo.com) last_ family. Functions prefix 'last_' retrieve latest data require input (arguments optional). * : Retrieve latest data Yahoo Finance API (https://query2.finance.yahoo.com) ‡ : Scraping latest data Yahoo Finance pages, .e. https://finance.yahoo.com/markets/world-indices/ […]/markets/crypto See vignette ‘last_’ functions. vignette(\"last_family\", package = \"financr\") function. helper functions Source : Yahoo Finance API (https://query2.finance.yahoo.com)","code":""},{"path":"https://clement-lvd.github.io/financr/articles/Functions_summary.html","id":"return-conventions","dir":"Articles","previous_headings":"","what":"Return Conventions","title":"Summary of Functions","text":"Regarding data.frame returned 'financr' functions, column names : following ‘snake_case’ conventions3, e.g., lowercase without spaces; symbols replaced (e.g., “%’ replaced ‘percent’).","code":""},{"path":"https://clement-lvd.github.io/financr/articles/get_changes.html","id":"get_changes-get_changes_historic","dir":"Articles","previous_headings":"","what":"get_changes() & get_changes_historic()","title":"get_changes","text":"get_changes() compute changes latest exchange rate, given currencies symbols. get_changes_historic() return data.frame historic exchange rates, given currencies symbols (default 1 obs. per day 1 year). Currencies indicated syntax get_changes() , similarly, default converting ‘USD’. E.g., pass named list character vectors, two separate lists equal length. Parameters. Optionally, can tweak returned data.frame using interval range parameters. E.g., retrieve one observation per month five-year period.","code":"library(financr)  changes <- get_changes(from = c(\"RON\", \"USD\"), to = \"EUR\")  changes[ , c(\"from\", \"to\",  \"regularmarketprice\", \"currency\", \"timestamp\")] #>   from  to regularmarketprice currency           timestamp #> 1  RON EUR             0.2002      EUR 2025-04-04 23:28:36 #> 2  USD EUR             0.9122      EUR 2025-04-04 23:29:36 changes <- get_changes_historic(from = c(\"EUR\", \"RON\") )  str(changes) #> 'data.frame':    526 obs. of  7 variables: #>  $ timestamp: POSIXct, format: \"2024-04-04 01:00:00\" \"2024-04-05 01:00:00\" ... #>  $ low      : num  1.08 1.08 1.08 1.08 1.07 ... #>  $ high     : num  1.09 1.08 1.09 1.09 1.09 ... #>  $ open     : num  1.08 1.08 1.08 1.09 1.09 ... #>  $ close    : num  1.08 1.08 1.08 1.09 1.09 ... #>  $ from     : chr  \"EUR\" \"EUR\" \"EUR\" \"EUR\" ... #>  $ to       : chr  \"USD\" \"USD\" \"USD\" \"USD\" ... #>  - attr(*, \"n.currencies\")= int 3 #>  - attr(*, \"currencies\")= chr [1:3] \"EUR\" \"RON\" \"USD\" #>  - attr(*, \"exchange\")= chr [1:2] \"EUR => USD\" \"RON => USD\" #>  - attr(*, \"date\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE df2_days <- get_changes_historic(from = c(\"EUR\" = \"RON\", \"USD\" = \"EUR\"))   same_as_df2_days <- get_changes_historic(from = c(\"EUR\", \"USD\"), to =c(\"RON\" , \"EUR\"))  head(same_as_df2_days, 2) #>             timestamp   close    open     low    high from  to #> 1 2024-04-04 01:00:00 4.96900 4.96900 4.96739 4.97048  EUR RON #> 2 2024-04-05 01:00:00 4.96824 4.96824 4.96509 4.96924  EUR RON df_month <- get_changes_historic(from = c(\"EUR\", \"JPY\"), interval = \"1mo\", range = '5y') str(df_month) #> 'data.frame':    122 obs. of  7 variables: #>  $ timestamp: POSIXct, format: \"2020-05-01 01:00:00\" \"2020-06-01 01:00:00\" ... #>  $ open     : num  1.09 1.11 1.12 1.18 1.19 ... #>  $ close    : num  1.11 1.12 1.19 1.19 1.17 ... #>  $ low      : num  1.08 1.11 1.12 1.17 1.16 ... #>  $ high     : num  1.11 1.14 1.19 1.2 1.2 ... #>  $ from     : chr  \"EUR\" \"EUR\" \"EUR\" \"EUR\" ... #>  $ to       : chr  \"USD\" \"USD\" \"USD\" \"USD\" ... #>  - attr(*, \"n.currencies\")= int 3 #>  - attr(*, \"currencies\")= chr [1:3] \"EUR\" \"JPY\" \"USD\" #>  - attr(*, \"exchange\")= chr [1:2] \"EUR => USD\" \"JPY => USD\" #>  - attr(*, \"date\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE"},{"path":"https://clement-lvd.github.io/financr/articles/get_changes.html","id":"last_currencies","dir":"Articles","previous_headings":"","what":"last_currencies()","title":"get_changes","text":"last_currencies() return list currencies symbols names. helpful understand currency symbols used Yahoo Finance API, found currency column data.frame returned get_historic(). Parameters. Filter symbols keep parameter /add latest market values (‘USD’) currency add_usd_values parameter.","code":"currencies <- last_currencies() str(currencies) #> 'data.frame':    159 obs. of  4 variables: #>  $ shortname    : chr  \"FJD\" \"MXN\" \"SCR\" \"CDF\" ... #>  $ longname     : chr  \"Fijian Dollar\" \"Mexican Peso\" \"Seychellois Rupee\" \"Congolese Franc\" ... #>  $ symbol       : chr  \"FJD\" \"MXN\" \"SCR\" \"CDF\" ... #>  $ locallongname: chr  \"Fijian Dollar\" \"Mexican Peso\" \"Seychellois Rupee\" \"Congolese Franc\" ... #>  - attr(*, \"date\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE few_currencies <- last_currencies(keep = c(\"RON\",  \"USD\"), add_usd_values = T ) few_currencies #>   symbol shortname     longname locallongname currency exchangename #> 1    RON       RON Romanian Leu  Romanian Leu      USD          CCY #> 2    USD       USD    US Dollar     US Dollar      USD          CCY #>   instrumenttype      firsttradedate gmtoffset timezone exchangetimezonename #> 1       CURRENCY 2005-07-01 01:00:00      3600      BST        Europe/London #> 2       CURRENCY                <NA>      3600      BST        Europe/London #>   regularmarketprice regularmarketdayhigh regularmarketdaylow fiftytwoweekhigh #> 1             0.2202               0.2202              0.2202           0.2258 #> 2             1.0000               1.0000              1.0000           1.0000 #>   fiftytwoweeklow previousclose regular_timezone  to           timestamp #> 1          0.2048        0.2221              BST USD 2025-04-06 01:24:12 #> 2          1.0000        1.0000              BST USD 2025-04-06 15:00:06"},{"path":"https://clement-lvd.github.io/financr/articles/last_family.html","id":"fetching-the-api","dir":"Articles","previous_headings":"","what":"Fetching the API","title":"The 'last_' family of functions","text":"Retrieve market summary insights. retrieve currencies latest ‘USD’ values, e.g. currencies 3-letters ISO code begin ‘Z’.","code":"library(financr)  datas <- last_market_summary(region = \"US\")  str(datas) #> 'data.frame':    15 obs. of  38 variables: #>  $ fullexchangename              : chr  \"SNP\" \"DJI\" \"Nasdaq GIDS\" \"Chicago Options\" ... #>  $ symbol                        : chr  \"^GSPC\" \"^DJI\" \"^IXIC\" \"^RUT\" ... #>  $ gmtoffsetmilliseconds         : int  -14400000 -14400000 -14400000 -14400000 -14400000 -14400000 -14400000 3600000 -18000000 3600000 ... #>  $ language                      : chr  \"en-US\" \"en-US\" \"en-US\" \"en-US\" ... #>  $ regularmarkettime_raw         : POSIXct, format: \"2025-04-08 22:44:02\" \"2025-04-08 22:44:02\" ... #>  $ regularmarkettime_fmt         : chr  \"4:44PM EDT\" \"4:44PM EDT\" \"4:45PM EDT\" \"4:30PM EDT\" ... #>  $ regularmarketchangepercent_raw: num  -1.57 -0.843 -2.149 -2.731 -3.937 ... #>  $ regularmarketchangepercent_fmt: num  -1.57 -0.84 -2.15 -2.73 -3.94 0.76 0.26 0.27 2.58 0.29 ... #>  $ quotetype                     : chr  \"INDEX\" \"INDEX\" \"INDEX\" \"INDEX\" ... #>  $ typedisp                      : chr  \"Index\" \"Index\" \"Index\" \"Index\" ... #>  $ tradeable                     : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ regularmarketpreviousclose_raw: num  5062.2 37965.6 15603.3 1810.1 60.7 ... #>  $ regularmarketpreviousclose_fmt: num  5062.2 37965.6 15603.3 1810.1 60.7 ... #>  $ exchangetimezonename          : chr  \"America/New_York\" \"America/New_York\" \"America/New_York\" \"America/New_York\" ... #>  $ regularmarketchange_raw       : num  -79.48 -320.01 -335.35 -49.43 -2.39 ... #>  $ regularmarketchange_fmt       : num  -79.48 -320.01 -335.35 -49.43 -2.39 ... #>  $ cryptotradeable               : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ exchangedatadelayedby         : int  0 0 0 15 10 10 10 0 0 0 ... #>  $ firsttradedatemilliseconds    : num  -1.33e+12 6.94e+11 3.46e+10 5.58e+11 9.67e+11 ... #>  $ exchangetimezoneshortname     : chr  \"EDT\" \"EDT\" \"EDT\" \"EDT\" ... #>  $ hasprepostmarketdata          : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ custompricealertconfidence    : chr  \"LOW\" \"LOW\" \"LOW\" \"LOW\" ... #>  $ marketstate                   : chr  \"POST\" \"POST\" \"POST\" \"POST\" ... #>  $ regularmarketprice_raw        : num  4982.8 37645.6 15267.9 1760.7 58.3 ... #>  $ regularmarketprice_fmt        : num  4982.8 37645.6 15267.9 1760.7 58.3 ... #>  $ market                        : chr  \"us_market\" \"us_market\" \"us_market\" \"us_market\" ... #>  $ quotesourcename               : chr  \"Delayed Quote\" \"Delayed Quote\" \"Delayed Quote\" \"Delayed Quote\" ... #>  $ pricehint                     : int  2 2 2 2 NA NA NA 4 4 4 ... #>  $ exchange                      : chr  \"SNP\" \"DJI\" \"NIM\" \"WCB\" ... #>  $ sourceinterval                : int  15 120 15 15 30 15 15 15 15 15 ... #>  $ region                        : chr  \"US\" \"US\" \"US\" \"US\" ... #>  $ shortname                     : chr  \"S&P 500\" \"Dow 30\" \"Nasdaq\" \"Russell 2000\" ... #>  $ triggerable                   : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ longname                      : chr  \"S&P 500\" \"Dow Jones Industrial Average\" \"NASDAQ Composite\" \"Russell 2000\" ... #>  $ headsymbolasstring            : chr  NA NA NA NA ... #>  $ headsymbol                    : logi  NA NA NA NA TRUE TRUE ... #>  $ contractsymbol                : logi  NA NA NA NA FALSE FALSE ... #>  $ currency                      : chr  NA NA NA NA ... #>  - attr(*, \"n.currencies\")= int 3 #>  - attr(*, \"currencies\")= chr [1:3] NA \"USD\" \"JPY\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-08\" #>  - attr(*, \"crypto\")= logi FALSE last_currencies(keep = \"^Z\", get_changes = T) #>   symbol shortname           longname      locallongname currency exchangename #> 1    ZAR       ZAR South African Rand South African Rand      USD          CCY #> 2    ZMW       ZMW                ZMW                ZMW      USD          CCY #>   instrumenttype      firsttradedate gmtoffset timezone exchangetimezonename #> 1       CURRENCY 2003-12-01 01:00:00      3600      BST        Europe/London #> 2       CURRENCY 2013-01-03 01:00:00      3600      BST        Europe/London #>   regularmarketprice regularmarketdayhigh regularmarketdaylow fiftytwoweekhigh #> 1             0.0506               0.0518              0.0506           0.0673 #> 2             0.0357               0.0360              0.0356           0.0418 #>   fiftytwoweeklow previousclose regular_timezone  to           timestamp #> 1          0.0506        0.0510              BST USD 2025-04-08 22:45:30 #> 2          0.0345        0.0357              BST USD 2025-04-08 21:57:20"},{"path":"https://clement-lvd.github.io/financr/articles/last_family.html","id":"scraping-on-yahoo-finance","dir":"Articles","previous_headings":"","what":"Scraping on Yahoo Finance","title":"The 'last_' family of functions","text":"functions rely web scraping (Yahoo Finance webpages), last_indices() last_crypto() respectively provide latest financial values (USD) 40 global market indices 100 cryptocurrencies. last_indices() return data.frame latest financial value major world financial indices. last_crypto() return data.frame 100 crypto-currencies values USD ($).","code":"indices <- last_indices() str(indices) #> 'data.frame':    41 obs. of  7 variables: #>  $ symbol        : chr  \"^GSPC\" \"^DJI\" \"^IXIC\" \"^NYA\" ... #>  $ name          : chr  \"S&P 500\" \"Dow Jones Industrial Average\" \"NASDAQ Composite\" \"NYSE COMPOSITE (DJ)\" ... #>  $ price         : num  4983 37646 15268 17188 4390 ... #>  $ change        : num  -79.5 -320 -335.4 -250.2 -102.8 ... #>  $ change_percent: num  -1.57 -0.84 -2.15 -1.43 -2.29 ... #>  $ volume        : num  5.06e+09 1.05e+09 8.84e+09 0.00 0.00 ... #>  $ currency      : chr  \"USD\" \"USD\" \"USD\" \"USD\" ... #>  - attr(*, \"n.currencies\")= int 1 #>  - attr(*, \"currencies\")= chr \"USD\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-08\" #>  - attr(*, \"crypto\")= logi FALSE krypt <- last_crypto() str(krypt) #> 'data.frame':    100 obs. of  13 variables: #>  $ symbol                          : chr  \"BTC-USD\" \"ETH-USD\" \"USDT-USD\" \"XRP-USD\" ... #>  $ name                            : chr  \"Bitcoin USD\" \"Ethereum USD\" \"Tether USDt USD\" \"XRP USD\" ... #>  $ price                           : num  7.71e+04 1.48e+03 9.99e-01 1.84 5.56e+02 ... #>  $ change                          : num  -1.92e+03 -9.66e+01 -4.82e-04 -1.07e-01 -3.06 ... #>  $ change_percent                  : num  -2.43 -6.13 -0.05 -5.49 -0.55 0.05 -1.92 1.55 -3.94 1.63 ... #>  $ market_cap                      : num  1.53e+12 1.78e+11 1.44e+11 1.07e+11 7.92e+10 ... #>  $ volume                          : num  4.91e+10 2.05e+10 8.17e+10 6.45e+09 1.67e+09 ... #>  $ volume_in_currency_24hr         : num  4.91e+10 2.05e+10 8.17e+10 6.45e+09 1.67e+09 ... #>  $ total_volume_all_currencies_24hr: num  4.91e+10 2.05e+10 8.17e+10 6.45e+09 1.67e+09 ... #>  $ circulating_supply              : num  1.98e+07 1.21e+08 1.44e+11 5.83e+10 1.42e+08 ... #>  $ x52_wk_change_percent           : num  14.6 -55.63 0 209.17 -4.54 ... #>  $ from                            : chr  \"BTC\" \"ETH\" \"USDT\" \"XRP\" ... #>  $ to                              : chr  \"USD\" \"USD\" \"USD\" \"USD\" ... #>  - attr(*, \"n.currencies\")= int 101 #>  - attr(*, \"currencies\")= chr [1:101] \"BTC\" \"ETH\" \"USDT\" \"XRP\" ... #>  - attr(*, \"exchange\")= chr [1:100] \"BTC => USD\" \"ETH => USD\" \"USDT => USD\" \"XRP => USD\" ... #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-08\" #>  - attr(*, \"crypto\")= logi TRUE"},{"path":"https://clement-lvd.github.io/financr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Clément Laverdet. Author, maintainer, copyright holder.","code":""},{"path":"https://clement-lvd.github.io/financr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Laverdet C (2025). financr: Retrieve Financial Data Yahoo Finance. R package version 0.3.0, https://clement-lvd.github.io/financr/, https://github.com/clement-LVD/financr.","code":"@Manual{,   title = {financr: Retrieve Financial Data From Yahoo Finance},   author = {Clément Laverdet},   year = {2025},   note = {R package version 0.3.0,     https://clement-lvd.github.io/financr/},   url = {https://github.com/clement-LVD/financr}, }"},{"path":"https://clement-lvd.github.io/financr/index.html","id":"financr","dir":"","previous_headings":"","what":"An R package for fetching financial data from Yahoo Finance","title":"An R package for fetching financial data from Yahoo Finance","text":"  Retrieves financial data Yahoo Finance. values assets currencies exchange rates Latest values major assets, e.g., world-level indices, currencies cryptocurrencies insights, e.g., latest market summary, assets association (related ), symbol validation Functions divided three families: ‘search_’: Search assets using free-text queries ‘get_’: Retrieve latest historical values symbols ‘last_’: Get market summaries, including latest values major assets, currencies, See vignette ‘Summary financr Functions’.","code":""},{"path":"https://clement-lvd.github.io/financr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R package for fetching financial data from Yahoo Finance","text":"can install development version financr:","code":"devtools::install_github(\"clement-LVD/financr\")"},{"path":"https://clement-lvd.github.io/financr/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"An R package for fetching financial data from Yahoo Finance","text":"Get ticker symbol free-texts. Given keyword(s) companies names, search symbols search_assets(). Optionally use ‘get_values’ parameter add latest prices results. Exploring results search_assets() way find symbol asset. search_assets_quick() variant. Get historical financial data. Given ticker symbol(s), get historical financial data financr::get_historic(). Default interval daily values.","code":"library(financr)  indices <- search_assets(c(\"Dow jones\"                            , \"euronext\")                          , type = \"index\" )  str(indices) #> 'data.frame':    9 obs. of  10 variables: #>  $ symbol        : chr  \"^DJI\" \"^DWCPF\" \"^DWRTF\" \"^N100\" ... #>  $ shortname     : chr  \"Dow Jones Industrial Average\" \"Dow Jones U.S. Completion Total\" \"Dow Jones U.S. Select REIT Inde\" \"Euronext 100 Index\" ... #>  $ longname      : chr  \"Dow Jones Industrial Average\" \"Dow Jones U.S. Completion Total\" \"Dow Jones U.S. Select REIT Inde\" \"Euronext 100 Index\" ... #>  $ exchange      : chr  \"DJI\" \"DJI\" \"DJI\" \"PAR\" ... #>  $ exchdisp      : chr  \"Dow Jones\" \"Dow Jones\" \"Dow Jones\" \"Paris\" ... #>  $ quotetype     : chr  \"INDEX\" \"INDEX\" \"INDEX\" \"INDEX\" ... #>  $ typedisp      : chr  \"Index\" \"Index\" \"Index\" \"Index\" ... #>  $ score         : num  58307 20358 20271 20013 20005 ... #>  $ isyahoofinance: logi  TRUE TRUE TRUE TRUE TRUE TRUE ... #>  $ searched      : chr  \"dow jones\" \"dow jones\" \"dow jones\" \"euronext\" ... #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-08\" #>  - attr(*, \"crypto\")= logi FALSE indices2 <- search_assets(   c(\"Dow jones\", \"euronext\")   , type = \"index\"   , get_values = TRUE )  str(indices2) #> 'data.frame':    9 obs. of  28 variables: #>  $ symbol              : chr  \"^DJI\" \"^DWCPF\" \"^DWRTF\" \"^N100\" ... #>  $ shortname           : chr  \"Dow Jones Industrial Average\" \"Dow Jones U.S. Completion Total\" \"Dow Jones U.S. Select REIT Inde\" \"Euronext 100 Index\" ... #>  $ longname            : chr  \"Dow Jones Industrial Average\" \"Dow Jones U.S. Completion Total\" \"Dow Jones U.S. Select REIT Inde\" \"Euronext 100 Index\" ... #>  $ exchange            : chr  \"DJI\" \"DJI\" \"DJI\" \"PAR\" ... #>  $ exchdisp            : chr  \"Dow Jones\" \"Dow Jones\" \"Dow Jones\" \"Paris\" ... #>  $ quotetype           : chr  \"INDEX\" \"INDEX\" \"INDEX\" \"INDEX\" ... #>  $ typedisp            : chr  \"Index\" \"Index\" \"Index\" \"Index\" ... #>  $ score               : num  58307 20358 20271 20013 20004 ... #>  $ isyahoofinance      : logi  TRUE TRUE TRUE TRUE TRUE TRUE ... #>  $ searched            : chr  \"dow jones\" \"dow jones\" \"dow jones\" \"euronext\" ... #>  $ currency            : chr  \"USD\" \"USD\" \"USD\" \"EUR\" ... #>  $ exchangename        : chr  \"DJI\" \"DJI\" \"DJI\" \"PAR\" ... #>  $ fullexchangename    : chr  \"DJI\" \"DJI\" \"DJI\" \"Paris\" ... #>  $ instrumenttype      : chr  \"INDEX\" \"INDEX\" \"INDEX\" \"INDEX\" ... #>  $ firsttradedate      : POSIXct, format: \"1992-01-02 15:30:00\" \"2006-08-24 15:30:00\" ... #>  $ regularmarkettime   : POSIXct, format: \"2025-04-08 21:21:04\" \"2025-04-08 21:21:04\" ... #>  $ hasprepostmarketdata: logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ gmtoffset           : int  -14400 -14400 -14400 7200 7200 7200 7200 7200 7200 #>  $ timezone            : chr  \"EDT\" \"EDT\" \"EDT\" \"CEST\" ... #>  $ exchangetimezonename: chr  \"America/New_York\" \"America/New_York\" \"America/New_York\" \"Europe/Paris\" ... #>  $ regularmarketprice  : num  37585 1786 257 1406 982 ... #>  $ fiftytwoweekhigh    : num  45074 2471 269 1619 982 ... #>  $ fiftytwoweeklow     : num  36612 1748 257 1337 982 ... #>  $ regularmarketdayhigh: num  39427 1908 269 1421 982 ... #>  $ regularmarketdaylow : num  37521 1782 257 1375 982 ... #>  $ regularmarketvolume : int  782659263 0 0 0 0 NA 0 NA NA #>  $ chartpreviousclose  : num  37966 1838 262 1370 968 ... #>  $ previousclose       : num  37966 1838 262 1370 968 ... #>  - attr(*, \"n.currencies\")= int 2 #>  - attr(*, \"currencies\")= chr [1:2] \"USD\" \"EUR\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-08\" #>  - attr(*, \"crypto\")= logi FALSE #>  - attr(*, \"date.begin\")= POSIXct[1:1], format: \"2025-04-07 22:40:13\" #>  - attr(*, \"date.end\")= POSIXct[1:1], format: \"2025-04-08 21:21:04\" #>  - attr(*, \"date.dif\")= num 22.7 histo <- get_historic(   c(\"SAAB-B.ST\", \"VOLV-B.ST\")   , .verbose = FALSE)  str(histo) #> 'data.frame':    1020 obs. of  20 variables: #>  $ open                : num  382 383 387 388 391 ... #>  $ close               : num  383 387 388 391 387 ... #>  $ low                 : num  382 383 385 387 387 ... #>  $ high                : num  387 388 388 391 392 ... #>  $ volume              : int  0 82991 66592 48022 56124 42464 43116 21731 23716 20243 ... #>  $ timestamp           : int  1744095600 1744095660 1744095720 1744095780 1744095840 1744095900 1744095960 1744096020 1744096080 1744096140 ... #>  $ date                : POSIXct, format: \"2025-04-08 09:00:00\" \"2025-04-08 09:01:00\" ... #>  $ currency            : chr  \"SEK\" \"SEK\" \"SEK\" \"SEK\" ... #>  $ symbol              : chr  \"SAAB-B.ST\" \"SAAB-B.ST\" \"SAAB-B.ST\" \"SAAB-B.ST\" ... #>  $ shortname           : chr  \"SAAB AB ser. B\" \"SAAB AB ser. B\" \"SAAB AB ser. B\" \"SAAB AB ser. B\" ... #>  $ longname            : chr  \"Saab AB (publ)\" \"Saab AB (publ)\" \"Saab AB (publ)\" \"Saab AB (publ)\" ... #>  $ exchangename        : chr  \"STO\" \"STO\" \"STO\" \"STO\" ... #>  $ fullexchangename    : chr  \"Stockholm\" \"Stockholm\" \"Stockholm\" \"Stockholm\" ... #>  $ timezone            : chr  \"CEST\" \"CEST\" \"CEST\" \"CEST\" ... #>  $ gmtoffset           : int  7200 7200 7200 7200 7200 7200 7200 7200 7200 7200 ... #>  $ regularmarketprice  : num  400 400 400 400 400 ... #>  $ fiftytwoweeklow     : num  204 204 204 204 204 ... #>  $ fiftytwoweekhigh    : num  420 420 420 420 420 420 420 420 420 420 ... #>  $ regularmarketdaylow : num  382 382 382 382 382 ... #>  $ regularmarketdayhigh: num  409 409 409 409 409 409 409 409 409 409 ... #>  - attr(*, \"n.currencies\")= int 1 #>  - attr(*, \"currencies\")= chr \"SEK\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-08\" #>  - attr(*, \"crypto\")= logi FALSE #>  - attr(*, \"date.begin\")= int 1744095600 #>  - attr(*, \"date.end\")= int 1744126140 #>  - attr(*, \"date.dif\")= num 30540"},{"path":"https://clement-lvd.github.io/financr/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"An R package for fetching financial data from Yahoo Finance","text":"Summary financr functions. ‘last_ family’ functions. Currency-related functions. example Vignette. Yahoo Finance API Licence. package retrieves data Yahoo Finance, property Yahoo Inc. Users must comply Yahoo Finance’s API terms. See informations legal Vignette.","code":""},{"path":"https://clement-lvd.github.io/financr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 financr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/construct_financial_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Attributes for a Financial Data Frame — construct_financial_df","title":"Construct Attributes for a Financial Data Frame — construct_financial_df","text":"internal function constructs assigns specific attributes financial data frame, providing metadata contents.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/construct_financial_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Attributes for a Financial Data Frame — construct_financial_df","text":"","code":"construct_financial_df(df, crypto = F, ...)"},{"path":"https://clement-lvd.github.io/financr/reference/construct_financial_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct Attributes for a Financial Data Frame — construct_financial_df","text":"df data.frame function compute statistics column (available) currency column crypto logical Attribute predefined cryptocurrencies dataset ... Attribute(s) add returned data.frame","code":""},{"path":"https://clement-lvd.github.io/financr/reference/construct_financial_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct Attributes for a Financial Data Frame — construct_financial_df","text":"Return data.frame additional attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest observation dataset. date.end POSIXct - recent observation dataset. date.dif numeric - number seconds date.begin date.end, equivalent difftime value. See vignette(\"Functions_summary\", package = \"financr\")","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_asset_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve flat meta data for a financial asset — get_asset_value","title":"Retrieve flat meta data for a financial asset — get_asset_value","text":"Internal function fetch flat (non-nested) meta data given asset symbol, stock. Returns one-row data frame high-level market asset information (e.g., prices, volumes, timezones).","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_asset_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve flat meta data for a financial asset — get_asset_value","text":"","code":"get_asset_value(symbol = \"SAAB-B.ST\", .verbose = F)"},{"path":"https://clement-lvd.github.io/financr/reference/get_asset_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve flat meta data for a financial asset — get_asset_value","text":"symbol Character. Asset symbol query (e.g., \"AAPL\"). .verbose Logical. TRUE, enables verbose output debugging purposes. Default FALSE.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_asset_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve flat meta data for a financial asset — get_asset_value","text":"data.frame 1 row per symbol provided 21 columns see get_values()","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/get_asset_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve flat meta data for a financial asset — get_asset_value","text":"","code":"if (FALSE) { # \\dontrun{ last_prices <- get_asset_value(\"SAAB-B.ST\") str(last_prices) } # }"},{"path":"https://clement-lvd.github.io/financr/reference/get_changes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Latest Exchange Rates For Devises — get_changes","title":"Get Latest Exchange Rates For Devises — get_changes","text":"Returns data.frame latest exchange rate(s) given currencies. Default convert USD ($).","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_changes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Latest Exchange Rates For Devises — get_changes","text":"","code":"get_changes(from = NULL, to = \"USD\", .verbose = T, ...)"},{"path":"https://clement-lvd.github.io/financr/reference/get_changes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Latest Exchange Rates For Devises — get_changes","text":", default = NULL character string representing base currency (e.g., \"USD\"). user must provide values one following method : passing paired character list, e.g., c(\"EUR\" = \"USD\", \"RON\" = \"EUR\") ; passing one several values : associated single value, e.g., = c('EUR', \"RON\"), = \"USD\" associated list values length, e.g., = c('EUR', \"RON\"), = c(\"USD\", \"EUR\") . , default = \"USD\" character string representing target currencies, e.g., c(\"EUR\", \"USD\"). .verbose logical TRUE, messages displayed, e.g., invalid symbols detected. Default FALSE. ... (internal use : user get_changes_historic() pass range interval parameters)","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_changes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Latest Exchange Rates For Devises — get_changes","text":"returned data.frame contains daily exchange rates, following columns: currency character - base currency. symbol character - Yahoo Finance symbol (e.g., \"EURUSD=X\"). exchangename character - exchange place name, .e. 'CCY' currencies. intrumenttype character - type financial instrument, supposed 'CURRENCY'. firsttradedate POSIXct - oldest date available Yahoo Finance API exchange rates historic. gmtoffset numeric - difference GMT time (seconds). timezone character - market's timezone. exchangetimezonename character - name market's timezone, e.g., 'Europe/London'. regularmarketprice numeric - latest market price. regularmarketdayhigh numeric - market highest price day. regularmarketdaylow numeric - market lowest price day. fiftytwoweekhigh numeric - highest price last 52 weeks. fiftytwoweeklow numeric - lowest price last 52 weeks. previousclose numeric - last closing price. regular_timezone character - regular market's timezone. character - currency converted another, e.g., value 1$ ('USD'), want receive certain amount currency reach 1$. character - currency want convert : currency-related numeric values row expressed currency. timestamp POSIXct - corresponding date (YYYY-MM-DD).","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_changes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Latest Exchange Rates For Devises — get_changes","text":"Return data.frame additional attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest observation dataset. date.end POSIXct - recent observation dataset. date.dif numeric - number seconds date.begin date.end, equivalent difftime value. See vignette(\"Functions_summary\", package = \"financr\")","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_changes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Latest Exchange Rates For Devises — get_changes","text":"Source : https://query2.finance.yahoo.com/v8/finance/chart/","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/get_changes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Latest Exchange Rates For Devises — get_changes","text":"","code":"if (FALSE) { # \\dontrun{ df <- get_changes(from = c(\"EUR\", \"JPY\")) str(df) df2 <- get_changes(from = c(\"EUR\" = \"RON\", \"USD\" = \"EUR\")) same_as_df2 <- get_changes(from = c(\"EUR\", \"USD\"), to =c(\"RON\" , \"EUR\")) str(same_as_df2) } # }"},{"path":"https://clement-lvd.github.io/financr/reference/get_changes_historic.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Historic of Devises Exchanges Rates — get_changes_historic","title":"Get Historic of Devises Exchanges Rates — get_changes_historic","text":"Get data.frame historical values exchanges rates, given currencies exchange. Default parameters period 1 year (1 obs. per day), convert USD ($).","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_changes_historic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Historic of Devises Exchanges Rates — get_changes_historic","text":"","code":"get_changes_historic(   from = NULL,   to = \"USD\",   interval = \"1d\",   range = \"1y\",   .verbose = T )"},{"path":"https://clement-lvd.github.io/financr/reference/get_changes_historic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Historic of Devises Exchanges Rates — get_changes_historic","text":"default = NULL character string representing base currency (e.g., \"USD\"). user must provide values one following method : passing paired character list, e.g., c(\"EUR\" = \"USD\", \"RON\" = \"EUR\") ; passing one several values : associated single value, e.g., = c('EUR', \"RON\"), = \"USD\" associated list values length, e.g., = c('EUR', \"RON\"), = c(\"USD\", \"EUR\") . default = \"USD\" character string representing target currencies, e.g., c(\"EUR\", \"USD\"). interval character, default = \"1d\". interval 2 rows time.series answered range character, default = \"1y\". period covered time series. .verbose logical TRUE, messages displayed, e.g., invalid symbols detected. Default FALSE.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_changes_historic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Historic of Devises Exchanges Rates — get_changes_historic","text":"data.frame historic exchanges rates given period, default daily results year. columns : timestamp POSIXct - opening price period (default day). close numeric - closing price period (default day). low numeric - highest price period (default day). open integer - traded volume. high numeric - lowest price period (default day). character - currency converted another, e.g., value 1$ ('USD'), want receive certain amount () currency reach 1$. character -  currency exchanged back value 1 currency. currencies-related numeric values line data.frame expressed currency**. Depending desired interval, recent observation truncated, e.g., '5y' range  '1d' interval answer approximately 30 days values 5 years ago.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_changes_historic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Historic of Devises Exchanges Rates — get_changes_historic","text":"Return data.frame additional attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest observation dataset. date.end POSIXct - recent observation dataset. date.dif numeric - number seconds date.begin date.end, equivalent difftime value. See vignette(\"Functions_summary\", package = \"financr\")","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_changes_historic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Historic of Devises Exchanges Rates — get_changes_historic","text":"Source : https://query2.finance.yahoo.com/v8/finance/chart/","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/get_changes_historic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Historic of Devises Exchanges Rates — get_changes_historic","text":"","code":"convert_to_usd <- get_changes_historic(from = c(\"EUR\", \"JPY\"))  days_bis <- get_changes_historic(from = c(\"EUR\" = \"RON\", \"USD\" = \"EUR\"))  # (equivalent to the previous line) # same_as_days_bis <- get_changes_historic(from = c(\"EUR\", \"USD\"), to =c(\"RON\" , \"EUR\"))  # Tweak interval and range months <- get_changes_historic(from = c(\"EUR\", \"JPY\"), interval = \"1mo\", range = '5y') str(months) #> 'data.frame':\t122 obs. of  7 variables: #>  $ timestamp: POSIXct, format: \"2020-05-01 01:00:00\" \"2020-06-01 01:00:00\" ... #>  $ high     : num  0.929 0.901 0.894 0.855 0.861 ... #>  $ close    : num  0.901 0.889 0.842 0.839 0.852 ... #>  $ open     : num  0.914 0.9 0.89 0.849 0.838 ... #>  $ low      : num  0.897 0.877 0.84 0.836 0.833 ... #>  $ from     : chr  \"EUR\" \"EUR\" \"EUR\" \"EUR\" ... #>  $ to       : chr  \"USD\" \"USD\" \"USD\" \"USD\" ... #>  - attr(*, \"n.currencies\")= int 3 #>  - attr(*, \"currencies\")= chr [1:3] \"EUR\" \"JPY\" \"USD\" #>  - attr(*, \"exchange\")= chr [1:2] \"EUR => USD\" \"JPY => USD\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-08\" #>  - attr(*, \"crypto\")= logi FALSE #>  - attr(*, \"date.begin\")= POSIXct[1:1], format: \"2020-05-01 01:00:00\" #>  - attr(*, \"date.end\")= POSIXct[1:1], format: \"2025-04-08 22:45:30\" #>  - attr(*, \"date.dif\")= num 1804"},{"path":"https://clement-lvd.github.io/financr/reference/get_historic.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Historical Financial Data — get_historic","title":"Get Historical Financial Data — get_historic","text":"Get historic stock market data financial ticker symbols, e.g., values closing day.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_historic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Historical Financial Data — get_historic","text":"","code":"get_historic(symbols = c(\"SAAB-B.ST\"), wait.time = 0, .verbose = T, ...)"},{"path":"https://clement-lvd.github.io/financr/reference/get_historic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Historical Financial Data — get_historic","text":"symbols character - character string representing financial indices search , e.g., ticker symbol(s). wait.time double, default = 0 - character string representing additional waiting time 2 calls Yahoo API. .verbose logical, default = TRUE - TRUE, send messages console. ... Arguments passed get_yahoo_data symbol character - character string representing symbol financial instrument (e.g., \"AAPL\" Apple). start_date character - character string representing start date R date format (UTC time). NULL, data starts 1970-01-01. end_date character - character string representing end date valid R date format (UTC time). NULL, data retrieved current date. range character - character string representing range returned datas : default return daily values.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_historic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Historical Financial Data — get_historic","text":"data.frame containing historical financial data following columns: open numeric opening price period (default day). close numeric closing price period (default day). low numeric lowest price period (default day). high numeric highest price period (default day). volume integer traded volume. timestamp integer Unix timestamps corresponding data point. date POSIXct day financial data point. currency character currency data reported, depending marketplace. symbol character stock financial instrument symbol (e.g., \"AAPL\"). shortname character abbreviated name company financial instrument. longname character full name company financial instrument. exchangename character name exchange marketplace financial instrument listed. fullexchangename character full name exchange marketplace. timezone character timezone data reported. gmtoffset integer UNIX timestamp difference market local time GMT time. regularMarketPrice numeric actual price market open, last closing price . fiftyTwoWeekLow numeric  Lowest price last 52 weeks. fiftyTwoWeekHigh numeric Highest price last 52 weeks. regularMarketDayHigh numeric highest price day (local exchange place day). regularMarketDayLow numeric  lowest price day (local exchange place day).","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_historic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Historical Financial Data — get_historic","text":"Return data.frame additional attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest observation dataset. date.end POSIXct - recent observation dataset. date.dif numeric - number seconds date.begin date.end, equivalent difftime value. See vignette(\"Functions_summary\", package = \"financr\")","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_historic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Historical Financial Data — get_historic","text":"Source : https://query1.finance.yahoo.com/v8/finance/chart/","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/get_historic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Historical Financial Data — get_historic","text":"","code":"datas <- get_historic(symbols = c(\"VOLCAR-B.ST\", \"SAAB-B.ST\") ) str(datas) #> 'data.frame':\t1020 obs. of  20 variables: #>  $ open                : num  17.5 17.4 17.4 17.4 17.4 ... #>  $ close               : num  17.4 17.3 17.4 17.4 17.4 ... #>  $ low                 : num  17.3 17.3 17.4 17.3 17.3 ... #>  $ high                : num  17.5 17.4 17.4 17.4 17.4 ... #>  $ volume              : int  0 28449 31853 18401 16111 17376 18562 44572 19006 47574 ... #>  $ timestamp           : int  1744095600 1744095660 1744095720 1744095780 1744095840 1744095900 1744095960 1744096020 1744096080 1744096140 ... #>  $ date                : POSIXct, format: \"2025-04-08 09:00:00\" \"2025-04-08 09:01:00\" ... #>  $ currency            : chr  \"SEK\" \"SEK\" \"SEK\" \"SEK\" ... #>  $ symbol              : chr  \"VOLCAR-B.ST\" \"VOLCAR-B.ST\" \"VOLCAR-B.ST\" \"VOLCAR-B.ST\" ... #>  $ shortname           : chr  \"Volvo Car AB ser. B\" \"Volvo Car AB ser. B\" \"Volvo Car AB ser. B\" \"Volvo Car AB ser. B\" ... #>  $ longname            : chr  \"Volvo Car AB (publ.)\" \"Volvo Car AB (publ.)\" \"Volvo Car AB (publ.)\" \"Volvo Car AB (publ.)\" ... #>  $ exchangename        : chr  \"STO\" \"STO\" \"STO\" \"STO\" ... #>  $ fullexchangename    : chr  \"Stockholm\" \"Stockholm\" \"Stockholm\" \"Stockholm\" ... #>  $ timezone            : chr  \"CEST\" \"CEST\" \"CEST\" \"CEST\" ... #>  $ gmtoffset           : int  7200 7200 7200 7200 7200 7200 7200 7200 7200 7200 ... #>  $ regularmarketprice  : num  17 17 17 17 17 ... #>  $ fiftytwoweeklow     : num  16.5 16.5 16.5 16.5 16.5 ... #>  $ fiftytwoweekhigh    : num  44.8 44.8 44.8 44.8 44.8 ... #>  $ regularmarketdaylow : num  16.8 16.8 16.8 16.8 16.8 ... #>  $ regularmarketdayhigh: num  17.5 17.5 17.5 17.5 17.5 17.5 17.5 17.5 17.5 17.5 ... #>  - attr(*, \"n.currencies\")= int 1 #>  - attr(*, \"currencies\")= chr \"SEK\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-08\" #>  - attr(*, \"crypto\")= logi FALSE #>  - attr(*, \"date.begin\")= int 1744095600 #>  - attr(*, \"date.end\")= int 1744126140 #>  - attr(*, \"date.dif\")= num 30540"},{"path":"https://clement-lvd.github.io/financr/reference/get_historic_light.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Historical Financial Data For Ticker Symbols — get_historic_light","title":"Get Historical Financial Data For Ticker Symbols — get_historic_light","text":"Get historic stock market data financial ticker symbols, e.g., values closing day.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_historic_light.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Historical Financial Data For Ticker Symbols — get_historic_light","text":"","code":"get_historic_light(   symbols = \"SAAB-B.ST\",   interval = \"1d\",   range = \"1mo\",   .verbose = F )"},{"path":"https://clement-lvd.github.io/financr/reference/get_historic_light.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Historical Financial Data For Ticker Symbols — get_historic_light","text":"symbols character character string representing financial indices search , e.g., ticker symbol(s). interval character, default = \"1d\". interval 2 rows time.series answered. range character, default = \"1y\". period covered time series. .verbose logical, default = TRUE. TRUE, send messages console.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_historic_light.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Historical Financial Data For Ticker Symbols — get_historic_light","text":"data.frame historical values : symbol character - Financial ticker symbol. timestamp POSIXct - Date observation (closing price). close numeric - Closing price asset.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_historic_light.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Historical Financial Data For Ticker Symbols — get_historic_light","text":"Return data.frame additional attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest observation dataset. date.end POSIXct - recent observation dataset. date.dif numeric - number seconds date.begin date.end, equivalent difftime value. See vignette(\"Functions_summary\", package = \"financr\")","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_historic_light.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Historical Financial Data For Ticker Symbols — get_historic_light","text":"","code":"histo_light <- get_historic_light(c(\"SAAB-B.ST\", \"AAPL\"))"},{"path":"https://clement-lvd.github.io/financr/reference/get_similar.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Similar Financial Symbols — get_similar","title":"Find Similar Financial Symbols — get_similar","text":"Given symbol(s), retrieve identical symbols (according Yahoo Finance) score similarity.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_similar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Similar Financial Symbols — get_similar","text":"","code":"get_similar(symbols = \"SAAB-B.ST\", .verbose = F, ...)"},{"path":"https://clement-lvd.github.io/financr/reference/get_similar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Similar Financial Symbols — get_similar","text":"symbols character - character string representing financial symbol search. .verbose logical - TRUE, messages displayed invalid symbols detected. Default TRUE. ... symbols (char. list char.)","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_similar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Similar Financial Symbols — get_similar","text":"data.frame symbols associated provided user similarity scores, according Yahoo Finance. character - Financial symbol provided user. symbol character - Symbol associated '' symbol. score numeric - Similarity score, according Yahoo Finance.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_similar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find Similar Financial Symbols — get_similar","text":"Source : https://query2.finance.yahoo.com/v6/finance/quote/validate","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_similar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Similar Financial Symbols — get_similar","text":"","code":"get_similar(symbols =   \"AAPL,GOOGL\") #>          from symbol    score #> AAPL.1   AAPL   AMZN 0.294692 #> AAPL.2   AAPL   TSLA 0.277906 #> AAPL.3   AAPL   GOOG 0.261002 #> AAPL.4   AAPL   META 0.250481 #> AAPL.5   AAPL   MSFT 0.210519 #> GOOGL.1 GOOGL   BABA 0.121615 #> GOOGL.2 GOOGL   NFLX 0.120016 #> GOOGL.3 GOOGL   PYPL 0.118353 #> GOOGL.4 GOOGL      V 0.118218 #> GOOGL.5 GOOGL   META 0.117211 get_similar(symbols =   c(\"AAPL\", \"GOOGL\")) #>          from symbol    score #> AAPL.1   AAPL   AMZN 0.294692 #> AAPL.2   AAPL   TSLA 0.277906 #> AAPL.3   AAPL   GOOG 0.261002 #> AAPL.4   AAPL   META 0.250481 #> AAPL.5   AAPL   MSFT 0.210519 #> GOOGL.1 GOOGL   BABA 0.121615 #> GOOGL.2 GOOGL   NFLX 0.120016 #> GOOGL.3 GOOGL   PYPL 0.118353 #> GOOGL.4 GOOGL      V 0.118218 #> GOOGL.5 GOOGL   META 0.117211"},{"path":"https://clement-lvd.github.io/financr/reference/get_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve latest financial data — get_values","title":"Retrieve latest financial data — get_values","text":"Get latest insights, given financial symbols. Data latest prices trading context returned.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve latest financial data — get_values","text":"","code":"get_values(symbols = c(\"AAPL\", \"GOOGL\"), .verbose = F)"},{"path":"https://clement-lvd.github.io/financr/reference/get_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve latest financial data — get_values","text":"symbols Character vector. One asset symbols (e.g., c(\"AAPL\", \"GOOGL\")). .verbose Logical. TRUE, displays verbose output fetching process. Default FALSE.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve latest financial data — get_values","text":"data.frame 1 row per valid financial symbol 21 columns, including: currency character - Trading currency asset (e.g., \"USD\"). symbol character - Symbol asset, e.g., ticker symbol. exchangename character - Abbreviated exchange place financial instrument name. fullexchangename character - Full name exchange place financial instrument. instrumenttype character - Type financial instrument (e.g., \"EQUITY\"). firsttradedate POSIXct - Datetime asset first traded. regularmarkettime POSIXct - Timestamp latest regular market quote. hasprepostmarketdata logical - Indicates pre/post-market data available. gmtoffset integer - Offset GMT seconds. timezone character - Abbreviated timezone name market. exchangetimezonename character - Timezone name exchange location. regularmarketprice numeric   - Latest regular market trading price. fiftytwoweekhigh numeric   - Highest price 52-weeks period. fiftytwoweeklow numeric - Lowest price  52-weeks period. regularmarketdayhigh numeric   - Highest price current market day. regularmarketdaylow numeric   - Lowest price current market day. regularmarketvolume integer   - Volume traded current market day. shortname character - Shortened common name asset. chartpreviousclose numeric   - Closing price shown charts. previousclose numeric - Previous official market close price.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve latest financial data — get_values","text":"Return data.frame additional attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest observation dataset. date.end POSIXct - recent observation dataset. date.dif numeric - number seconds date.begin date.end, equivalent difftime value. See vignette(\"Functions_summary\", package = \"financr\")","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_values.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Retrieve latest financial data — get_values","text":"Source : https://query2.finance.yahoo.com/v8/finance/chart/","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve latest financial data — get_values","text":"","code":"get_values(c(\"AAPL\", \"GOOGL\",\"SAAB-B.ST\")) #>   currency    symbol exchangename fullexchangename instrumenttype #> 1      USD      AAPL          NMS         NasdaqGS         EQUITY #> 2      USD     GOOGL          NMS         NasdaqGS         EQUITY #> 3      SEK SAAB-B.ST          STO        Stockholm         EQUITY #>        firsttradedate   regularmarkettime hasprepostmarketdata gmtoffset #> 1 1980-12-12 15:30:00 2025-04-08 22:00:02                 TRUE    -14400 #> 2 2004-08-19 15:30:00 2025-04-08 22:00:02                 TRUE    -14400 #> 3 2000-01-03 09:00:00 2025-04-08 17:29:39                FALSE      7200 #>   timezone exchangetimezonename regularmarketprice fiftytwoweekhigh #> 1      EDT     America/New_York             172.42           260.10 #> 2      EDT     America/New_York             144.70           207.05 #> 3     CEST     Europe/Stockholm             400.45           420.00 #>   fiftytwoweeklow regularmarketdayhigh regularmarketdaylow regularmarketvolume #> 1          164.08              190.335             169.210           119314792 #> 2          140.53              152.240             143.035            51771345 #> 3          203.70              409.000             381.750             6474387 #>        shortname chartpreviousclose previousclose #> 1     Apple Inc.             181.46        181.46 #> 2  Alphabet Inc.             146.75        146.75 #> 3 SAAB AB ser. B             369.50        369.50"},{"path":"https://clement-lvd.github.io/financr/reference/get_yahoo_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Historical Financial Data For a Given Symbol — get_yahoo_data","title":"Get Historical Financial Data For a Given Symbol — get_yahoo_data","text":"Get historical financial values associated ticker symbol. data includes open stock price, high, low, close, volume, along timestamps.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_yahoo_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Historical Financial Data For a Given Symbol — get_yahoo_data","text":"","code":"get_yahoo_data(   symbol = \"AAPL\",   start_date = NULL,   end_date = NULL,   range = \"1d\",   .verbose = T )"},{"path":"https://clement-lvd.github.io/financr/reference/get_yahoo_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Historical Financial Data For a Given Symbol — get_yahoo_data","text":"symbol character - character string representing symbol financial instrument (e.g., \"AAPL\" Apple). start_date character - character string representing start date R date format (UTC time). NULL, data starts 1970-01-01. end_date character - character string representing end date valid R date format (UTC time). NULL, data retrieved current date. range character - character string representing range returned datas : default return daily values. .verbose logical TRUE, messages displayed, e.g., invalid symbols detected.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_yahoo_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Historical Financial Data For a Given Symbol — get_yahoo_data","text":"data.frame containing historical financial data following columns: open numeric opening price period (default day). close numeric closing price period (default day). low numeric lowest price period (default day). high numeric highest price period (default day). volume integer traded volume. timestamp integer Unix timestamps corresponding data point. date POSIXct day financial data point. currency character currency data reported, depending marketplace. symbol character stock financial instrument symbol (e.g., \"AAPL\"). shortname character abbreviated name company financial instrument. longname character full name company financial instrument. exchangename character name exchange marketplace financial instrument listed. fullexchangename character full name exchange marketplace. timezone character timezone data reported. gmtoffset integer UNIX timestamp difference market local time GMT time. regularMarketPrice numeric actual price market open, last closing price . fiftyTwoWeekLow numeric  Lowest price last 52 weeks. fiftyTwoWeekHigh numeric Highest price last 52 weeks. regularMarketDayHigh numeric highest price day (local exchange place day). regularMarketDayLow numeric  lowest price day (local exchange place day).","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_yahoo_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Historical Financial Data For a Given Symbol — get_yahoo_data","text":"default data.frame line day. user provide another range '1d' (one day), lines filtered , order match desired range. Valid ranges : \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\". function allows user specify date range using start end dates. date range specified, retrieves available data beginning time (default start) current date (default end).","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_yahoo_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Historical Financial Data For a Given Symbol — get_yahoo_data","text":"Source : https://query1.finance.yahoo.com/v8/finance/chart/","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_yahoo_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Historical Financial Data For a Given Symbol — get_yahoo_data","text":"","code":"if (FALSE) { # \\dontrun{ data <- get_yahoo_data(symbol = \"SAAB-B.ST\", start_date = \"2020-01-01\", range = \"1d\") } # }"},{"path":"https://clement-lvd.github.io/financr/reference/last_crypto.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Latest Cryptocurrencies Values (USD) and Market Data — last_crypto","title":"Get Latest Cryptocurrencies Values (USD) and Market Data — last_crypto","text":"Return data.frame latest financial data 100 cryptocurrencies, e.g., actual values cryptocurrency USD.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_crypto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Latest Cryptocurrencies Values (USD) and Market Data — last_crypto","text":"","code":"last_crypto(keep = NULL, .verbose = T)"},{"path":"https://clement-lvd.github.io/financr/reference/last_crypto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Latest Cryptocurrencies Values (USD) and Market Data — last_crypto","text":"keep character - Character vector symbols filter results (perl expression, ignoring case). NULL (default), filtering applied, available indices returned. .verbose logical, default = TRUE - TRUE, send messages console necessary.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_crypto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Latest Cryptocurrencies Values (USD) and Market Data — last_crypto","text":"data frame 100 observations 13 variables: symbol character - Cryptocurrency ticker symbol. name character - Name cryptocurrency, along quoted 'real-world' currency. price numeric - Current price cryptocurrency USD ($). change numeric - Absolute price change USD since last closing exchange place. change_percent numeric - Percentage price change since last closing exchange place (%). market_cap numeric - Total market capitalization cryptocurrency. volume numeric - 24-hour trading volume. volume_in_currency_24hr numeric - 24-hour trading volume associated 'real-world' currency (time redundant volume column). total_volume_all_currencies_24hr numeric - 24-hour total trading volume across currency pairs. circulating_supply numeric - Total circulating supply cryptocurrency. x52_wk_change_percent numeric - Percentage change price last 52 weeks (%). character - currency converted another, e.g., value 1$ ('USD'), want receive certain amount currency reach 1$. character - currency want convert : currency-related numeric values line data.frame expressed currency.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_crypto.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Latest Cryptocurrencies Values (USD) and Market Data — last_crypto","text":"Return data.frame additional attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest observation dataset. date.end POSIXct - recent observation dataset. date.dif numeric - number seconds date.begin date.end, equivalent difftime value. See vignette(\"Functions_summary\", package = \"financr\")","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_crypto.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Latest Cryptocurrencies Values (USD) and Market Data — last_crypto","text":"Source : Yahoo Finance 'crypto' page, https://finance.yahoo.com/markets/crypto//","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/last_crypto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Latest Cryptocurrencies Values (USD) and Market Data — last_crypto","text":"","code":"krypto <- last_crypto() head(krypto) #>     symbol            name        price       change change_percent  market_cap #> 1  BTC-USD     Bitcoin USD 77101.910000 -1919.780000          -2.43 1.53000e+12 #> 2  ETH-USD    Ethereum USD  1478.010000   -96.560000          -6.13 1.78360e+11 #> 3 USDT-USD Tether USDt USD     0.999072    -0.000482          -0.05 1.44058e+11 #> 4  XRP-USD         XRP USD     1.837900    -0.106700          -5.49 1.07103e+11 #> 5  BNB-USD         BNB USD   555.920000    -3.060000          -0.55 7.92030e+10 #> 6 USDC-USD    USD Coin USD     1.000400     0.000500           0.05 6.01970e+10 #>       volume volume_in_currency_24hr total_volume_all_currencies_24hr #> 1 4.9119e+10              4.9119e+10                       4.9119e+10 #> 2 2.0456e+10              2.0456e+10                       2.0456e+10 #> 3 8.1715e+10              8.1715e+10                       8.1715e+10 #> 4 6.4510e+09              6.4510e+09                       6.4510e+09 #> 5 1.6730e+09              1.6730e+09                       1.6730e+09 #> 6 1.5037e+10              1.5037e+10                       1.5037e+10 #>   circulating_supply x52_wk_change_percent from  to #> 1        1.98490e+07                 14.60  BTC USD #> 2        1.20676e+08                -55.63  ETH USD #> 3        1.44192e+11                  0.00 USDT USD #> 4        5.82750e+10                209.17  XRP USD #> 5        1.42471e+08                 -4.54  BNB USD #> 6        6.01720e+10                  0.02 USDC USD"},{"path":"https://clement-lvd.github.io/financr/reference/last_currencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Currencies Names, Symbols and Add Latest 'USD' Values — last_currencies","title":"Get Currencies Names, Symbols and Add Latest 'USD' Values — last_currencies","text":"Return data.frame financial indices (currencies) given vector symbols, e.g., 'EUR'. Optionally, can filter results add last market price ('USD') currencies.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_currencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Currencies Names, Symbols and Add Latest 'USD' Values — last_currencies","text":"","code":"last_currencies(keep = NULL, get_changes = F, .verbose = T)"},{"path":"https://clement-lvd.github.io/financr/reference/last_currencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Currencies Names, Symbols and Add Latest 'USD' Values — last_currencies","text":"keep character - Character vector symbols filter results (perl expression, ignoring case). NULL (default), filtering applied, available indices returned. get_changes logical, default = FALSE - TRUE, add latest market values ('USD') get_changes(). See get_changes() base structure. .verbose logical, default = TRUE - TRUE, send messages console necessary.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_currencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Currencies Names, Symbols and Add Latest 'USD' Values — last_currencies","text":"data.frame containing unique financial indices (currencies). table columns like symbol, name, relevant information, column names lowercase. keep specified, matching currencies returned. get_changes specified, last financial insights get_changes() added, e.g., last market values currency ('USD')","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_currencies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Currencies Names, Symbols and Add Latest 'USD' Values — last_currencies","text":"Return data.frame additional attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest observation dataset. date.end POSIXct - recent observation dataset. date.dif numeric - number seconds date.begin date.end, equivalent difftime value. See vignette(\"Functions_summary\", package = \"financr\")","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_currencies.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Currencies Names, Symbols and Add Latest 'USD' Values — last_currencies","text":"Source : https://query2.finance.yahoo.com/v1/finance/currencies","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/last_currencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Currencies Names, Symbols and Add Latest 'USD' Values — last_currencies","text":"","code":"# Fetch all available indices all_indices <- last_currencies()  # Fetch only specific indices selected_indices <- last_currencies(keep = c(\"^Z\", \"EUR\"))"},{"path":"https://clement-lvd.github.io/financr/reference/last_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get World Financial Indices Latest Values (USD) — last_indices","title":"Get World Financial Indices Latest Values (USD) — last_indices","text":"Get latest stock market indices values data 40 world-indices, e.g., latest prices, change percentage change.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get World Financial Indices Latest Values (USD) — last_indices","text":"","code":"last_indices(.verbose = T, keep = NULL)"},{"path":"https://clement-lvd.github.io/financr/reference/last_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get World Financial Indices Latest Values (USD) — last_indices","text":".verbose logical, default = TRUE - TRUE, send messages console necessary. keep character - Character vector symbols filter results (perl expression, ignoring case). NULL (default), filtering applied, available indices returned.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get World Financial Indices Latest Values (USD) — last_indices","text":"data frame following columns: symbol character - Ticker symbol index, aka world indices (e.g., '^GSPC' S&P 500). name character -  Full name index (e.g., \"S&P 500\"). price numeric - Current value index (USD). change numeric - Absolute change index value since last closing exchange place. change_percent numeric - Percentage change index value since last closing exchange place. volume numeric - total trading volume index components. currency character - Currency associated world-indice, .e. 'USD'.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_indices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get World Financial Indices Latest Values (USD) — last_indices","text":"Return data.frame additional attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest observation dataset. date.end POSIXct - recent observation dataset. date.dif numeric - number seconds date.begin date.end, equivalent difftime value. See vignette(\"Functions_summary\", package = \"financr\")","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_indices.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get World Financial Indices Latest Values (USD) — last_indices","text":"Source : Yahoo's world indices page - https://finance.yahoo.com/markets/world-indices","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/last_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get World Financial Indices Latest Values (USD) — last_indices","text":"","code":"if (FALSE) { # \\dontrun{ indices <- last_indices() head(indices) } # }"},{"path":"https://clement-lvd.github.io/financr/reference/last_market_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Market Index Summary Latest Data — last_market_summary","title":"Retrieve Market Index Summary Latest Data — last_market_summary","text":"Return data.frame latest summary information set major financial market indices.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_market_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Market Index Summary Latest Data — last_market_summary","text":"","code":"last_market_summary(region = NULL, .verbose = TRUE)"},{"path":"https://clement-lvd.github.io/financr/reference/last_market_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Market Index Summary Latest Data — last_market_summary","text":"region character, default = NULL (filtering) - Select region filter results. .verbose logical, default = FALSE - Logical flag indicating whether print verbose output debugging informational purposes.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_market_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Market Index Summary Latest Data — last_market_summary","text":"data.frame 15 rows 38 variables. row corresponds market index includes following information: Information asset: symbol, shortname, longname, exchange, region, currency Market time info, mostly associated pricing info: regularmarkettime_raw, regularmarkettime_fmt Market pricing info: regularmarketprice_raw, regularmarketchange_raw, regularmarketchangepercent_raw, etc. Metadata marketstate, quotetype, pricehint, exchangedatadelayedby, hasprepostmarketdata fields cryptotradeable, tradeable, triggerable, contracts, etc.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_market_summary.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Retrieve Market Index Summary Latest Data — last_market_summary","text":"Source : https://query2.finance.yahoo.com/v6/finance/quote/marketSummary","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/last_market_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Market Index Summary Latest Data — last_market_summary","text":"","code":"df <- last_market_summary()  df_fr <- last_market_summary(region = \"FR\")"},{"path":"https://clement-lvd.github.io/financr/reference/search_assets.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Financial Asset From Keywords (Multiple Texts) — search_assets","title":"Search Financial Asset From Keywords (Multiple Texts) — search_assets","text":"Get symbols associated free texts companies names world-indices. Several ticker symbols associated various exchanges places returned, companies names, sector/category (available), etc.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/search_assets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Financial Asset From Keywords (Multiple Texts) — search_assets","text":"","code":"search_assets(   texts,   exchange = NULL,   type = NULL,   get_values = F,   .verbose = F )"},{"path":"https://clement-lvd.github.io/financr/reference/search_assets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Financial Asset From Keywords (Multiple Texts) — search_assets","text":"texts character character string list character representing text(s) search , e.g., company names. exchange character (optionnal) - character string representing exchange place(s) consider - exact match, e.g., 'STO' (Stockholm stock exchange). Default keep results. type (optionnal) character string representing type asset search ('quotetype' column value used filter results). Case insensitive. get_values logical, default = FALSE - TRUE, search values symbols add columns get_values() .verbose logical, default = FALSE TRUE, messages displayed, e.g., invalid symbols detected.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/search_assets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Financial Asset From Keywords (Multiple Texts) — search_assets","text":"Return data.frame following columns: symbol character - ticker symbol associated asset, e.g., \"VTI\", \"^DWCPF\". shortname character - short name asset, e.g., ETF index name. longname character - full name asset, full ETF index name - sometimes returned Yahoo. exchange character - exchange asset listed, e.g., \"PCX\", \"DJI\", \"NGM\". exchdisp character - full name exchange place asset traded, e.g., \"NYSEArca\", \"Dow Jones\". quoteType character - type asset, e.g., \"FUTURES\", \"INDEX\". typeDisp character - type asset, formatted display, e.g., \"Futures\", \"Index\"). score numeric - numerical score assigned Yahoo order indicate relevance matched result, .e. similarity text. isYahooFinance logical - Indicates whether symbol recognized Yahoo Finance - always TRUE context. searched character - text searched Yahoo API, e.g., \"Dow Jones\".","code":""},{"path":"https://clement-lvd.github.io/financr/reference/search_assets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search Financial Asset From Keywords (Multiple Texts) — search_assets","text":"Return data.frame additional attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest observation dataset. date.end POSIXct - recent observation dataset. date.dif numeric - number seconds date.begin date.end, equivalent difftime value. See vignette(\"Functions_summary\", package = \"financr\")","code":""},{"path":"https://clement-lvd.github.io/financr/reference/search_assets.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search Financial Asset From Keywords (Multiple Texts) — search_assets","text":"Source : https://query2.finance.yahoo.com/v1/","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/search_assets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search Financial Asset From Keywords (Multiple Texts) — search_assets","text":"","code":"indices <- search_assets(texts = c(\"Dow jones\", \"euronext\"), type = \"index\" )  swed <- search_assets(c(\"VOLVO car\", \"RENAULT\"),  exchange = c(\"STO\", \"PAR\")) head(swed) #>        symbol           shortname             longname exchange  exchdisp #> 1 VOLCAR-B.ST Volvo Car AB ser. B Volvo Car AB (publ.)      STO Stockholm #> 8      RNO.PA             RENAULT           Renault SA      PAR     Paris #>   quotetype typedisp score isyahoofinance  searched #> 1    EQUITY   Equity 20053           TRUE volvo car #> 8    EQUITY   Equity 20049           TRUE   renault  swed_last_values <- search_assets(c(\"VOLVO car\", \"SAAB\") ,  exchange = \"STO\", get_values = TRUE )  str(swed_last_values) #> 'data.frame':\t2 obs. of  28 variables: #>  $ symbol              : chr  \"SAAB-B.ST\" \"VOLCAR-B.ST\" #>  $ shortname           : chr  \"SAAB AB ser. B\" \"Volvo Car AB ser. B\" #>  $ longname            : chr  \"Saab AB (publ)\" \"Volvo Car AB (publ.)\" #>  $ exchange            : chr  \"STO\" \"STO\" #>  $ exchdisp            : chr  \"Stockholm\" \"Stockholm\" #>  $ quotetype           : chr  \"EQUITY\" \"EQUITY\" #>  $ typedisp            : chr  \"Equity\" \"Equity\" #>  $ score               : num  20057 20053 #>  $ isyahoofinance      : logi  TRUE TRUE #>  $ searched            : chr  \"saab\" \"volvo car\" #>  $ currency            : chr  \"SEK\" \"SEK\" #>  $ exchangename        : chr  \"STO\" \"STO\" #>  $ fullexchangename    : chr  \"Stockholm\" \"Stockholm\" #>  $ instrumenttype      : chr  \"EQUITY\" \"EQUITY\" #>  $ firsttradedate      : POSIXct, format: \"2000-01-03 09:00:00\" \"2021-10-29 09:00:00\" #>  $ regularmarkettime   : POSIXct, format: \"2025-04-08 17:29:39\" \"2025-04-08 17:29:42\" #>  $ hasprepostmarketdata: logi  FALSE FALSE #>  $ gmtoffset           : int  7200 7200 #>  $ timezone            : chr  \"CEST\" \"CEST\" #>  $ exchangetimezonename: chr  \"Europe/Stockholm\" \"Europe/Stockholm\" #>  $ regularmarketprice  : num  400 17 #>  $ fiftytwoweekhigh    : num  420 44.8 #>  $ fiftytwoweeklow     : num  203.7 16.5 #>  $ regularmarketdayhigh: num  409 17.5 #>  $ regularmarketdaylow : num  381.8 16.8 #>  $ regularmarketvolume : int  6474387 7581041 #>  $ chartpreviousclose  : num  370 17 #>  $ previousclose       : num  370 17 #>  - attr(*, \"n.currencies\")= int 1 #>  - attr(*, \"currencies\")= chr \"SEK\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-08\" #>  - attr(*, \"crypto\")= logi FALSE #>  - attr(*, \"date.begin\")= POSIXct[1:1], format: \"2025-04-08 17:29:39\" #>  - attr(*, \"date.end\")= POSIXct[1:1], format: \"2025-04-08 17:29:42\" #>  - attr(*, \"date.dif\")= num 3"},{"path":"https://clement-lvd.github.io/financr/reference/search_assets_quick.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Financial Assets From Keyword(s) — search_assets_quick","title":"Search Financial Assets From Keyword(s) — search_assets_quick","text":"Search financial data based texts retrieve asset symbol(s), name(s), exchanges place(s), asset type(s). variant search_assets().","code":""},{"path":"https://clement-lvd.github.io/financr/reference/search_assets_quick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Financial Assets From Keyword(s) — search_assets_quick","text":"","code":"search_assets_quick(   texts = \"Dow Jones\",   .verbose = TRUE,   region = NULL,   lang = \"en\" )"},{"path":"https://clement-lvd.github.io/financr/reference/search_assets_quick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Financial Assets From Keyword(s) — search_assets_quick","text":"texts character string representing texts search. can company name, index, financial term. .verbose logical TRUE, print additional details search process. Default TRUE. region character string specifying region search (e.g., \"US\", \"EU\"). Default NULL, meaning region filter applied. lang character string specifying language data returned. Default \"en\" English.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/search_assets_quick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Financial Assets From Keyword(s) — search_assets_quick","text":"data.frame assets symbols names. symbol - financial symbol (e.g., stock ticker index). name - full name financial entity (e.g., 'Dow Jones Industrial Average'). exch - exchange symbol listed (e.g., 'DJI', 'CBT'). type - type financial instrument (e.g., Index, F Futures, E Exchange Traded Fund). exchdisp - exchange name displayed (e.g., 'Dow Jones'). typedisp - long name type financial instrument (e.g., 'Index', 'Futures' 'ETF' 'Exchange Traded Fund').","code":""},{"path":"https://clement-lvd.github.io/financr/reference/search_assets_quick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search Financial Assets From Keyword(s) — search_assets_quick","text":"","code":"# Example of searching for financial data related to \"Dow Jones\" results <- search_assets_quick(texts = \"Dow Jones\") str(results) #> 'data.frame':\t10 obs. of  7 variables: #>  $ symbol  : chr  \"^DJI\" \"YM=F\" \"RX=F\" \"MYM=F\" ... #>  $ name    : chr  \"Dow Jones Industrial Average\" \"Mini Dow Jones Indus.-$5 Jun 25\" \"Dow Jones US Real Estate Index\" \"Micro E-mini Dow Jones Industri\" ... #>  $ exch    : chr  \"DJI\" \"CBT\" \"CBT\" \"CBT\" ... #>  $ type    : chr  \"I\" \"F\" \"F\" \"F\" ... #>  $ exchdisp: chr  \"Dow Jones\" \"Chicago Board of Trade\" \"Chicago Board of Trade\" \"Chicago Board of Trade\" ... #>  $ typedisp: chr  \"Index\" \"Futures\" \"Futures\" \"Futures\" ... #>  $ searched: chr  \"Dow Jones\" \"Dow Jones\" \"Dow Jones\" \"Dow Jones\" ... #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-08\" #>  - attr(*, \"crypto\")= logi FALSE"},{"path":"https://clement-lvd.github.io/financr/reference/valid_symbol.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Financial Symbols — valid_symbol","title":"Validate Financial Symbols — valid_symbol","text":"Checks validity financial symbols using Yahoo Finance's validation API. Return data.frame logical values indicating whether symbol recognized Yahoo Finance.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/valid_symbol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Financial Symbols — valid_symbol","text":"","code":"valid_symbol(symbols = NULL, ..., .verbose = T)"},{"path":"https://clement-lvd.github.io/financr/reference/valid_symbol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Financial Symbols — valid_symbol","text":"symbols character string list character strings representing financial symbols validate. ... symbols (char. list char.) .verbose logical TRUE, messages displayed invalid symbols detected. Default TRUE.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/valid_symbol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Financial Symbols — valid_symbol","text":"data.frame boolean logical table one row many columns number unique symbols provided user. column corresponds symbol, logical value TRUE Yahoo Finance recognizes symbol, FALSE otherwise.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/valid_symbol.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Validate Financial Symbols — valid_symbol","text":"Source : https://query2.finance.yahoo.com/v6/finance/quote/validate","code":""},{"path":"https://clement-lvd.github.io/financr/reference/valid_symbol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Financial Symbols — valid_symbol","text":"","code":"valid_symbol(\"AAPL,GOOGL\") #>   GOOGL AAPL #> 1  TRUE TRUE valid_symbol(symbols = c(\"CDF\", \"SCR\", \"INVALID\")) #> Invalid financial symbol(s) : CDF, SCR, INVALID #>     CDF   SCR INVALID #> 1 FALSE FALSE   FALSE"}]
