[{"path":"https://clement-lvd.github.io/financr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 financr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://clement-lvd.github.io/financr/articles/Functions_summary.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Summary of Functions","text":"Source. Yahoo Finance used consistently data source across package. Inputs. function expects specific type input, based prefix. Outputs. 'financr' functions return standardized data.frame, see last section ‘Standardized Return Conventions’. Functions '_historic' suffix return historic financial data, others retrieve latest financial data.","code":""},{"path":"https://clement-lvd.github.io/financr/articles/Functions_summary.html","id":"details","dir":"Articles","previous_headings":"","what":"Details","title":"Summary of Functions","text":"search_ family. Functions prefix 'search_' retrieve latest data expect free-text input(s). Source : Yahoo Finance API (https://query2.finance.yahoo.com) get_ family. Functions prefix 'get_' retrieve historical latest financial values, given financial symbol(s) Source : Yahoo Finance API (https://query2.finance.yahoo.com) last_ family. Functions prefix 'last_' retrieve latest data require input (arguments optional). ‡ : Scraping latest data Yahoo Finance pages, .e. https://finance.yahoo.com/markets/world-indices/ […]/markets/crypto * : Retrieve latest data Yahoo Finance API (https://query2.finance.yahoo.com) functions. helper functions Source : Yahoo Finance API (https://query2.finance.yahoo.com)","code":""},{"path":"https://clement-lvd.github.io/financr/articles/Functions_summary.html","id":"standardized-return-conventions","dir":"Articles","previous_headings":"","what":"Standardized Return Conventions","title":"Summary of Functions","text":"Regarding data.frame returned 'financr' functions: column names : following ‘snake_case’ conventions, e.g., lowercase without spaces; symbols replaced (e.g., “%’ replaced ‘percent’); Examples similarities differences 'R packages' Vignette ‘Summary financr Ecosystem’.","code":""},{"path":"https://clement-lvd.github.io/financr/articles/currencies.html","id":"get_changes-get_changes_historic","dir":"Articles","previous_headings":"","what":"get_changes() & get_changes_historic()","title":"Currency-related functions","text":"get_changes() compute changes latest exchange rate, given currencies symbols. Get historic exchange rates, given currencies symbols. Currencies indicated syntax get_changes() default converting ‘USD’ get_changes() default. E.g., pass named list character vectors, two separate lists equal length. Range Interval Parameters. Default 1 row per day 1-year period interval range indicated. E.g., retrieve one observation per month five-year period.","code":"library(financr)  changes <- get_changes(from = c(\"RON\", \"USD\"), to = \"EUR\")  changes[ , c(\"from\", \"to\",  \"regularmarketprice\", \"currency\", \"timestamp\")] #>   from  to regularmarketprice currency           timestamp #> 1  RON EUR             0.2007      EUR 2025-04-06 21:38:35 #> 2  USD EUR             0.9168      EUR 2025-04-06 21:39:35 changes <- get_changes_historic(from = c(\"EUR\", \"RON\") )  str(changes) #> 'data.frame':    526 obs. of  7 variables: #>  $ timestamp: POSIXct, format: \"2024-04-03 23:00:00\" \"2024-04-04 23:00:00\" ... #>  $ high     : num  1.09 1.08 1.09 1.09 1.09 ... #>  $ low      : num  1.08 1.08 1.08 1.08 1.07 ... #>  $ open     : num  1.08 1.08 1.08 1.09 1.09 ... #>  $ close    : num  1.08 1.08 1.08 1.09 1.09 ... #>  $ from     : chr  \"EUR\" \"EUR\" \"EUR\" \"EUR\" ... #>  $ to       : chr  \"USD\" \"USD\" \"USD\" \"USD\" ... #>  - attr(*, \"n.currencies\")= int 3 #>  - attr(*, \"currencies\")= chr [1:3] \"EUR\" \"RON\" \"USD\" #>  - attr(*, \"exchange\")= chr [1:2] \"EUR => USD\" \"RON => USD\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE #>  - attr(*, \"date.begin\")= POSIXct[1:1], format: \"2024-04-03 23:00:00\" #>  - attr(*, \"date.end\")= POSIXct[1:1], format: \"2025-04-06 21:39:35\" #>  - attr(*, \"date.dif\")= 'difftime' num 367.944155092593 #>   ..- attr(*, \"units\")= chr \"days\" df2_days <- get_changes_historic(from = c(\"EUR\" = \"RON\", \"USD\" = \"EUR\"))   same_as_df2_days <- get_changes_historic(from = c(\"EUR\", \"USD\"), to =c(\"RON\" , \"EUR\")) df_month <- get_changes_historic(   from = c(\"EUR\", \"JPY\")   , interval = \"1mo\", range = '5y')  str(df_month) #> 'data.frame':    122 obs. of  7 variables: #>  $ timestamp: POSIXct, format: \"2020-04-30 23:00:00\" \"2020-05-31 23:00:00\" ... #>  $ open     : num  1.09 1.11 1.12 1.18 1.19 ... #>  $ low      : num  1.08 1.11 1.12 1.17 1.16 ... #>  $ close    : num  1.11 1.12 1.19 1.19 1.17 ... #>  $ high     : num  1.11 1.14 1.19 1.2 1.2 ... #>  $ from     : chr  \"EUR\" \"EUR\" \"EUR\" \"EUR\" ... #>  $ to       : chr  \"USD\" \"USD\" \"USD\" \"USD\" ... #>  - attr(*, \"n.currencies\")= int 3 #>  - attr(*, \"currencies\")= chr [1:3] \"EUR\" \"JPY\" \"USD\" #>  - attr(*, \"exchange\")= chr [1:2] \"EUR => USD\" \"JPY => USD\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE #>  - attr(*, \"date.begin\")= POSIXct[1:1], format: \"2020-04-30 23:00:00\" #>  - attr(*, \"date.end\")= POSIXct[1:1], format: \"2025-04-06 21:40:28\" #>  - attr(*, \"date.dif\")= 'difftime' num 1801.94476851852 #>   ..- attr(*, \"units\")= chr \"days\""},{"path":"https://clement-lvd.github.io/financr/articles/currencies.html","id":"last_currencies","dir":"Articles","previous_headings":"","what":"last_currencies()","title":"Currency-related functions","text":"Get data.frame currencies symbols names. helpful understand currency symbols used Yahoo Finance API, found currency column data.frame returned get_historic(). Parameters. Add latest market values (‘USD’) currency add_usd_values parameter /filter symbols keep parameter, matching text advanced perl regex (ignoring case).","code":"currencies <- last_currencies() str(currencies) #> 'data.frame':    159 obs. of  4 variables: #>  $ shortname    : chr  \"FJD\" \"MXN\" \"SCR\" \"CDF\" ... #>  $ longname     : chr  \"Fijian Dollar\" \"Mexican Peso\" \"Seychellois Rupee\" \"Congolese Franc\" ... #>  $ symbol       : chr  \"FJD\" \"MXN\" \"SCR\" \"CDF\" ... #>  $ locallongname: chr  \"Fijian Dollar\" \"Mexican Peso\" \"Seychellois Rupee\" \"Congolese Franc\" ... #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE few_currencies <- last_currencies(keep = c(\"RON\",  \"Z..\")                                   , add_usd_values = T ) few_currencies #>   symbol shortname           longname      locallongname currency exchangename #> 1    RON       RON       Romanian Leu       Romanian Leu      USD          CCY #> 2    ZAR       ZAR South African Rand South African Rand      USD          CCY #> 3    ZMW       ZMW                ZMW                ZMW      USD          CCY #>   instrumenttype      firsttradedate gmtoffset timezone exchangetimezonename #> 1       CURRENCY 2005-06-30 23:00:00      3600      BST        Europe/London #> 2       CURRENCY 2003-12-01 00:00:00      3600      BST        Europe/London #> 3       CURRENCY 2013-01-03 00:00:00      3600      BST        Europe/London #>   regularmarketprice regularmarketdayhigh regularmarketdaylow fiftytwoweekhigh #> 1             0.2193               0.2208              0.2188           0.2258 #> 2             0.0523               0.0527              0.0523           0.0673 #> 3             0.0360               0.0360              0.0360           0.0418 #>   fiftytwoweeklow previousclose regular_timezone  to           timestamp #> 1          0.2048        0.2221              BST USD 2025-04-06 21:35:02 #> 2          0.0516        0.0535              BST USD 2025-04-06 21:04:28 #> 3          0.0345        0.0359              BST USD 2025-04-06 14:54:47"},{"path":"https://clement-lvd.github.io/financr/articles/last_family.html","id":"fetching-the-api","dir":"Articles","previous_headings":"","what":"Fetching the API","title":"The '`last_`' family of functions","text":"Retrieve market summary insights. retrieve currencies latest ‘USD’ values, e.g. currencies 3-letters ISO code begin ‘Z’.","code":"datas <- last_market_summary(region = \"US\")  str(datas) #> 'data.frame':    15 obs. of  38 variables: #>  $ fullexchangename              : chr  \"SNP\" \"DJI\" \"Nasdaq GIDS\" \"Chicago Options\" ... #>  $ symbol                        : chr  \"^GSPC\" \"^DJI\" \"^IXIC\" \"^RUT\" ... #>  $ gmtoffsetmilliseconds         : int  -14400000 -14400000 -14400000 -14400000 -14400000 -14400000 -14400000 3600000 -18000000 3600000 ... #>  $ language                      : chr  \"en-US\" \"en-US\" \"en-US\" \"en-US\" ... #>  $ regularmarkettime_raw         : POSIXct, format: \"2025-04-04 20:35:58\" \"2025-04-04 20:35:58\" ... #>  $ regularmarkettime_fmt         : chr  \"4:35PM EDT\" \"4:35PM EDT\" \"5:15PM EDT\" \"4:30PM EDT\" ... #>  $ regularmarketchangepercent_raw: num  -5.975 -5.503 -5.817 -4.371 0.532 ... #>  $ regularmarketchangepercent_fmt: num  -5.97 -5.5 -5.82 -4.37 0.53 0.78 1.01 -1.32 -1.73 -2.01 ... #>  $ quotetype                     : chr  \"INDEX\" \"INDEX\" \"INDEX\" \"INDEX\" ... #>  $ typedisp                      : chr  \"Index\" \"Index\" \"Index\" \"Index\" ... #>  $ tradeable                     : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ regularmarketpreviousclose_raw: num  5397 40546 16551 1911 62 ... #>  $ regularmarketpreviousclose_fmt: num  5397 40546 16551 1911 62 ... #>  $ exchangetimezonename          : chr  \"America/New_York\" \"America/New_York\" \"America/New_York\" \"America/New_York\" ... #>  $ regularmarketchange_raw       : num  -322.44 -2231.04 -962.81 -83.52 0.33 ... #>  $ regularmarketchange_fmt       : num  -322.44 -2231.04 -962.81 -83.52 0.33 ... #>  $ cryptotradeable               : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ exchangedatadelayedby         : int  0 0 0 15 10 10 10 0 0 0 ... #>  $ firsttradedatemilliseconds    : num  -1.33e+12 6.94e+11 3.46e+10 5.58e+11 9.67e+11 ... #>  $ exchangetimezoneshortname     : chr  \"EDT\" \"EDT\" \"EDT\" \"EDT\" ... #>  $ hasprepostmarketdata          : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ marketstate                   : chr  \"CLOSED\" \"CLOSED\" \"CLOSED\" \"CLOSED\" ... #>  $ regularmarketprice_raw        : num  5074.1 38314.9 15587.8 1827 62.3 ... #>  $ regularmarketprice_fmt        : num  5074.1 38314.9 15587.8 1827 62.3 ... #>  $ custompricealertconfidence    : chr  \"LOW\" \"LOW\" \"LOW\" \"LOW\" ... #>  $ market                        : chr  \"us_market\" \"us_market\" \"us_market\" \"us_market\" ... #>  $ quotesourcename               : chr  \"Delayed Quote\" \"Delayed Quote\" \"Delayed Quote\" \"Delayed Quote\" ... #>  $ pricehint                     : int  2 2 2 2 NA NA NA 4 4 4 ... #>  $ exchange                      : chr  \"SNP\" \"DJI\" \"NIM\" \"WCB\" ... #>  $ sourceinterval                : int  15 120 15 15 30 15 15 15 15 15 ... #>  $ shortname                     : chr  \"S&P 500\" \"Dow 30\" \"Nasdaq\" \"Russell 2000\" ... #>  $ region                        : chr  \"US\" \"US\" \"US\" \"US\" ... #>  $ triggerable                   : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ longname                      : chr  \"S&P 500\" \"Dow Jones Industrial Average\" \"NASDAQ Composite\" \"Russell 2000\" ... #>  $ headsymbolasstring            : chr  NA NA NA NA ... #>  $ headsymbol                    : logi  NA NA NA NA TRUE TRUE ... #>  $ contractsymbol                : logi  NA NA NA NA FALSE FALSE ... #>  $ currency                      : chr  NA NA NA NA ... #>  - attr(*, \"n.currencies\")= int 3 #>  - attr(*, \"currencies\")= chr [1:3] NA \"USD\" \"JPY\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE last_currencies(keep = \"^Z\", add_usd_values = T) #>   symbol shortname           longname      locallongname currency exchangename #> 1    ZAR       ZAR South African Rand South African Rand      USD          CCY #> 2    ZMW       ZMW                ZMW                ZMW      USD          CCY #>   instrumenttype firsttradedate gmtoffset timezone exchangetimezonename #> 1       CURRENCY     2003-12-01      3600      BST        Europe/London #> 2       CURRENCY     2013-01-03      3600      BST        Europe/London #>   regularmarketprice regularmarketdayhigh regularmarketdaylow fiftytwoweekhigh #> 1             0.0523               0.0527              0.0523           0.0673 #> 2             0.0360               0.0360              0.0360           0.0418 #>   fiftytwoweeklow previousclose regular_timezone  to           timestamp #> 1          0.0516        0.0535              BST USD 2025-04-06 21:04:28 #> 2          0.0345        0.0359              BST USD 2025-04-06 14:54:47"},{"path":"https://clement-lvd.github.io/financr/articles/last_family.html","id":"scraping-on-yahoo-finance","dir":"Articles","previous_headings":"","what":"Scraping on Yahoo Finance","title":"The '`last_`' family of functions","text":"functions rely web scraping (Yahoo Finance webpages), financr::last_indices() financr::last_crypto() respectively provide latest financial values (USD) 40 global market indices 100 cryptocurrencies. last_indices() return data.frame latest financial value major world financial indices. last_crypto() return data.frame 100 crypto-currencies values USD ($).","code":"indices <- last_indices() str(indices) #> 'data.frame':    41 obs. of  7 variables: #>  $ symbol        : chr  \"^GSPC\" \"^DJI\" \"^IXIC\" \"^NYA\" ... #>  $ name          : chr  \"S&P 500\" \"Dow Jones Industrial Average\" \"NASDAQ Composite\" \"NYSE COMPOSITE (DJ)\" ... #>  $ price         : num  5074 38315 15588 17619 4608 ... #>  $ change        : num  -322 -2231 -963 -1149 -308 ... #>  $ change_percent: num  -5.97 -5.5 -5.82 -6.12 -6.27 ... #>  $ volume        : num  6.05e+09 1.29e+09 9.14e+09 0.00 0.00 ... #>  $ currency      : chr  \"USD\" \"USD\" \"USD\" \"USD\" ... #>  - attr(*, \"n.currencies\")= int 1 #>  - attr(*, \"currencies\")= chr \"USD\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE krypt <- last_crypto() str(krypt) #> 'data.frame':    100 obs. of  13 variables: #>  $ symbol                          : chr  \"BTC-USD\" \"ETH-USD\" \"USDT-USD\" \"XRP-USD\" ... #>  $ name                            : chr  \"Bitcoin USD\" \"Ethereum USD\" \"Tether USDt USD\" \"XRP USD\" ... #>  $ price                           : num  7.91e+04 1.59e+03 9.99e-01 1.97 5.55e+02 ... #>  $ change                          : num  -3.98e+03 -1.98e+02 -1.65e-04 -1.60e-01 -3.71e+01 ... #>  $ change_percent                  : num  -4.79 -11.07 -0.02 -7.52 -6.27 ... #>  $ market_cap                      : num  1.57e+12 1.92e+11 1.44e+11 1.15e+11 7.90e+10 ... #>  $ volume                          : num  2.77e+10 1.82e+10 6.11e+10 3.83e+09 1.35e+09 ... #>  $ volume_in_currency_24hr         : num  2.77e+10 1.82e+10 6.11e+10 3.83e+09 1.35e+09 ... #>  $ total_volume_all_currencies_24hr: num  2.77e+10 1.82e+10 6.11e+10 3.83e+09 1.35e+09 ... #>  $ circulating_supply              : num  1.98e+07 1.21e+08 1.44e+11 5.83e+10 1.42e+08 ... #>  $ x52_wk_change_percent           : num  20.39 -47.71 -0.03 260.39 1.54 ... #>  $ from                            : chr  \"BTC\" \"ETH\" \"USDT\" \"XRP\" ... #>  $ to                              : chr  \"USD\" \"USD\" \"USD\" \"USD\" ... #>  - attr(*, \"n.currencies\")= int 101 #>  - attr(*, \"currencies\")= chr [1:101] \"BTC\" \"ETH\" \"USDT\" \"XRP\" ... #>  - attr(*, \"exchange\")= chr [1:100] \"BTC => USD\" \"ETH => USD\" \"USDT => USD\" \"XRP => USD\" ... #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi TRUE"},{"path":"https://clement-lvd.github.io/financr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Clément Laverdet. Author, maintainer, copyright holder.","code":""},{"path":"https://clement-lvd.github.io/financr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Laverdet C (2025). financr: Retrieve Financial Data Yahoo Finance. R package version 0.3.0, https://clement-lvd.github.io/financr/, https://github.com/clement-LVD/financr.","code":"@Manual{,   title = {financr: Retrieve Financial Data From Yahoo Finance},   author = {Clément Laverdet},   year = {2025},   note = {R package version 0.3.0,     https://clement-lvd.github.io/financr/},   url = {https://github.com/clement-LVD/financr}, }"},{"path":"https://clement-lvd.github.io/financr/index.html","id":"financr","dir":"","previous_headings":"","what":"An R package for fetching financial data from Yahoo Finance","title":"An R package for fetching financial data from Yahoo Finance","text":"  Retrieves financial data Yahoo Finance : Historical market data, e.g., prices assets, currencies exchange rates. Latest insights assets, e.g., major indices, currencies cryptocurrencies. insights, e.g., market summary, assets association (related ), symbol validation. See vignette ‘Summary financr Functions’.","code":""},{"path":"https://clement-lvd.github.io/financr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R package for fetching financial data from Yahoo Finance","text":"can install development version financr:","code":"devtools::install_github(\"clement-LVD/financr\")"},{"path":"https://clement-lvd.github.io/financr/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"An R package for fetching financial data from Yahoo Finance","text":"Get ticker symbol free-texts. Given keyword(s) companies names, search symbols financr::search_assets(). Optionally use add_latest_values parameter add latest prices results. don’t know ticker symbol asset, exploring results search_assets() search_assets_quick() way find . Get historical financial data. Given ticker symbol(s), get historic financial values financr::get_historic() (default interval daily values).","code":"library(financr)  indices <- search_assets(c(\"Dow jones\"                            , \"euronext\")                          , type = \"index\" )  str(indices) #> 'data.frame':    8 obs. of  10 variables: #>  $ symbol        : chr  \"^DJI\" \"^DWCPF\" \"^DWRTF\" \"ESG1N.AS\" ... #>  $ shortname     : chr  \"Dow Jones Industrial Average\" \"Dow Jones U.S. Completion Total\" \"Dow Jones U.S. Select REIT Inde\" \"Euronext Eurozone 100 ESG NR\" ... #>  $ longname      : chr  \"Dow Jones Industrial Average\" \"Dow Jones U.S. Completion Total\" \"Dow Jones U.S. Select REIT Inde\" \"Euronext Eurozone 100 ESG NR\" ... #>  $ exchange      : chr  \"DJI\" \"DJI\" \"DJI\" \"AMS\" ... #>  $ exchdisp      : chr  \"Dow Jones\" \"Dow Jones\" \"Dow Jones\" \"Amsterdam\" ... #>  $ quotetype     : chr  \"INDEX\" \"INDEX\" \"INDEX\" \"INDEX\" ... #>  $ typedisp      : chr  \"Index\" \"Index\" \"Index\" \"Index\" ... #>  $ score         : num  35585 20112 20105 20005 20004 ... #>  $ isyahoofinance: logi  TRUE TRUE TRUE TRUE TRUE TRUE ... #>  $ searched      : chr  \"dow jones\" \"dow jones\" \"dow jones\" \"euronext\" ... #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE indices2 <- search_assets(   c(\"Dow jones\", \"euronext\")   , type = \"index\"   , add_latest_values = TRUE )  str(indices2) #> 'data.frame':    8 obs. of  28 variables: #>  $ symbol              : chr  \"^DJI\" \"^DWCPF\" \"^DWRTF\" \"ALASG.PA\" ... #>  $ shortname           : chr  \"Dow Jones Industrial Average\" \"Dow Jones U.S. Completion Total\" \"Dow Jones U.S. Select REIT Inde\" \"Euronext Growth All-Share Index\" ... #>  $ longname            : chr  \"Dow Jones Industrial Average\" \"Dow Jones U.S. Completion Total\" \"Dow Jones U.S. Select REIT Inde\" \"Euronext Growth All-Share Index\" ... #>  $ exchange            : chr  \"DJI\" \"DJI\" \"DJI\" \"PAR\" ... #>  $ exchdisp            : chr  \"Dow Jones\" \"Dow Jones\" \"Dow Jones\" \"Paris\" ... #>  $ quotetype           : chr  \"INDEX\" \"INDEX\" \"INDEX\" \"INDEX\" ... #>  $ typedisp            : chr  \"Index\" \"Index\" \"Index\" \"Index\" ... #>  $ score               : num  35585 20112 20105 20004 20004 ... #>  $ isyahoofinance      : logi  TRUE TRUE TRUE TRUE TRUE TRUE ... #>  $ searched            : chr  \"dow jones\" \"dow jones\" \"dow jones\" \"euronext\" ... #>  $ currency            : chr  \"USD\" \"USD\" \"USD\" \"EUR\" ... #>  $ exchangename        : chr  \"DJI\" \"DJI\" \"DJI\" \"PAR\" ... #>  $ fullexchangename    : chr  \"DJI\" \"DJI\" \"DJI\" \"Paris\" ... #>  $ instrumenttype      : chr  \"INDEX\" \"INDEX\" \"INDEX\" \"INDEX\" ... #>  $ firsttradedate      : POSIXct, format: \"1992-01-02 15:30:00\" \"2006-08-24 15:30:00\" ... #>  $ regularmarkettime   : POSIXct, format: \"2025-04-04 22:35:58\" \"2025-04-04 23:10:11\" ... #>  $ hasprepostmarketdata: logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ gmtoffset           : int  -14400 -14400 -14400 7200 7200 7200 7200 7200 #>  $ timezone            : chr  \"EDT\" \"EDT\" \"EDT\" \"CEST\" ... #>  $ exchangetimezonename: chr  \"America/New_York\" \"America/New_York\" \"America/New_York\" \"Europe/Paris\" ... #>  $ regularmarketprice  : num  38315 1852 270 989 2367 ... #>  $ fiftytwoweekhigh    : num  45074 2471 279 989 2367 ... #>  $ fiftytwoweeklow     : num  37612 1806 270 989 2367 ... #>  $ regularmarketdayhigh: num  40098 1894 279 989 2367 ... #>  $ regularmarketdaylow : num  38265 1806 270 989 2367 ... #>  $ regularmarketvolume : int  1290108622 0 0 0 NA 0 NA NA #>  $ chartpreviousclose  : num  40546 1954 283 1028 2502 ... #>  $ previousclose       : num  40546 1954 283 1028 2502 ... #>  - attr(*, \"n.currencies\")= int 2 #>  - attr(*, \"currencies\")= chr [1:2] \"USD\" \"EUR\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE #>  - attr(*, \"date.begin\")= POSIXct[1:1], format: \"2025-04-04 18:05:02\" #>  - attr(*, \"date.end\")= POSIXct[1:1], format: \"2025-04-04 23:10:13\" #>  - attr(*, \"date.dif\")= 'difftime' num 5.08638888888889 #>   ..- attr(*, \"units\")= chr \"hours\" histo <- get_historic(   c(\"SAAB-B.ST\", \"VOLV-B.ST\")   , .verbose = FALSE)  str(histo) #> 'data.frame':    1020 obs. of  20 variables: #>  $ open                : num  411 410 414 416 418 ... #>  $ close               : num  410 414 416 418 419 ... #>  $ low                 : num  409 409 413 416 417 ... #>  $ high                : num  412 415 418 418 419 ... #>  $ volume              : int  0 36745 56432 18363 43626 34211 51050 34181 45256 36016 ... #>  $ timestamp           : int  1743750000 1743750060 1743750120 1743750180 1743750240 1743750300 1743750360 1743750420 1743750480 1743750540 ... #>  $ date                : POSIXct, format: \"2025-04-04 09:00:00\" \"2025-04-04 09:01:00\" ... #>  $ currency            : chr  \"SEK\" \"SEK\" \"SEK\" \"SEK\" ... #>  $ symbol              : chr  \"SAAB-B.ST\" \"SAAB-B.ST\" \"SAAB-B.ST\" \"SAAB-B.ST\" ... #>  $ shortname           : chr  \"SAAB AB ser. B\" \"SAAB AB ser. B\" \"SAAB AB ser. B\" \"SAAB AB ser. B\" ... #>  $ longname            : chr  \"Saab AB (publ)\" \"Saab AB (publ)\" \"Saab AB (publ)\" \"Saab AB (publ)\" ... #>  $ exchangename        : chr  \"STO\" \"STO\" \"STO\" \"STO\" ... #>  $ fullexchangename    : chr  \"Stockholm\" \"Stockholm\" \"Stockholm\" \"Stockholm\" ... #>  $ timezone            : chr  \"CEST\" \"CEST\" \"CEST\" \"CEST\" ... #>  $ gmtoffset           : int  7200 7200 7200 7200 7200 7200 7200 7200 7200 7200 ... #>  $ regularmarketprice  : num  379 379 379 379 379 ... #>  $ fiftytwoweeklow     : num  204 204 204 204 204 ... #>  $ fiftytwoweekhigh    : num  420 420 420 420 420 420 420 420 420 420 ... #>  $ regularmarketdaylow : num  365 365 365 365 365 365 365 365 365 365 ... #>  $ regularmarketdayhigh: num  420 420 420 420 420 420 420 420 420 420 ... #>  - attr(*, \"n.currencies\")= int 1 #>  - attr(*, \"currencies\")= chr \"SEK\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE #>  - attr(*, \"date.begin\")= int 1743750000 #>  - attr(*, \"date.end\")= int 1743780540 #>  - attr(*, \"date.dif\")= int 30540"},{"path":"https://clement-lvd.github.io/financr/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"An R package for fetching financial data from Yahoo Finance","text":"Summary financr functions. ‘last_ family’ functions`. Currency-related functions. Workflow example. Yahoo Finance API Licence. package retrieves data Yahoo Finance, property Yahoo Inc. Users must comply Yahoo Finance’s API terms. See informations legal Vignette.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/construct_financial_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Attributes for a Financial Data Frame — construct_financial_df","title":"Construct Attributes for a Financial Data Frame — construct_financial_df","text":"internal function constructs assigns specific attributes financial data frame, providing metadata contents.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/construct_financial_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Attributes for a Financial Data Frame — construct_financial_df","text":"","code":"construct_financial_df(df, crypto = F, ...)"},{"path":"https://clement-lvd.github.io/financr/reference/construct_financial_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct Attributes for a Financial Data Frame — construct_financial_df","text":"df data.frame function compute statistics column (available) currency column crypto logical Attribute predefined cryptocurrencies dataset","code":""},{"path":"https://clement-lvd.github.io/financr/reference/construct_financial_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct Attributes for a Financial Data Frame — construct_financial_df","text":"Return data.frame additionnal attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest obs. dataset. date.end POSIXct - recent date dataset. date.dif numeric & difftime - number seconds date.begin date.end.","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/get_asset_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve flat meta data for a financial asset — get_asset_value","title":"Retrieve flat meta data for a financial asset — get_asset_value","text":"Internal function fetch flat (non-nested) meta data given asset symbol, stock. Returns one-row data frame high-level market asset information (e.g., prices, volumes, timezones).","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_asset_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve flat meta data for a financial asset — get_asset_value","text":"","code":"get_asset_value(symbol = \"SAAB-B.ST\", .verbose = F)"},{"path":"https://clement-lvd.github.io/financr/reference/get_asset_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve flat meta data for a financial asset — get_asset_value","text":"symbol Character. Asset symbol query (e.g., \"AAPL\"). .verbose Logical. TRUE, enables verbose output debugging purposes. Default FALSE.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_asset_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve flat meta data for a financial asset — get_asset_value","text":"data.frame 1 row per symbol provided 21 columns see get_values()","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/get_asset_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve flat meta data for a financial asset — get_asset_value","text":"","code":"if (FALSE) { # \\dontrun{ last_prices <- get_asset_value(\"SAAB-B.ST\") str(last_prices) } # }"},{"path":"https://clement-lvd.github.io/financr/reference/get_changes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Latest Exchange Rates For Devises — get_changes","title":"Get Latest Exchange Rates For Devises — get_changes","text":"Returns data.frame latest exchange rate(s) given currencies. Default convert USD ($).","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_changes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Latest Exchange Rates For Devises — get_changes","text":"","code":"get_changes(from = NULL, to = \"USD\", .verbose = T, ...)"},{"path":"https://clement-lvd.github.io/financr/reference/get_changes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Latest Exchange Rates For Devises — get_changes","text":", default = NULL character string representing base currency (e.g., \"USD\"). user must provide values one following method : passing paired character list, e.g., c(\"EUR\" = \"USD\", \"RON\" = \"EUR\") ; passing one several values : associated single value, e.g., = c('EUR', \"RON\"), = \"USD\" associated list values length, e.g., = c('EUR', \"RON\"), = c(\"USD\", \"EUR\") . , default = \"USD\" character string representing target currencies, e.g., c(\"EUR\", \"USD\"). .verbose logical TRUE, messages displayed, e.g., invalid symbols detected. Default FALSE. ... parameters passed get_a_change - internal mecanism get_changes_historic","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_changes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Latest Exchange Rates For Devises — get_changes","text":"returned dataframe contains daily exchange rates, following columns: currency character - base currency. symbol character - Yahoo Finance symbol (e.g., \"EURUSD=X\"). exchangename character - exchange place name, .e. 'CCY' currencies. intrumenttype character - type financial instrument, supposed 'CURRENCY'. firsttradedate POSIXct - oldest date available Yahoo Finance API exchange rates historic. gmtoffset numeric - difference GMT time (seconds). timezone character - market's timezone. exchangetimezonename character - name market's timezone, e.g., 'Europe/London'. regularmarketprice numeric - latest market price. regularmarketdayhigh numeric - market highest price day. regularmarketdaylow numeric - market lowest price day. fiftytwoweekhigh numeric - highest price last 52 weeks. fiftytwoweeklow numeric - lowest price last 52 weeks. previousclose numeric - last closing price. regular_timezone character - regular market's timezone. character - currency converted another, e.g., value 1$ ('USD'), want receive certain amount currency reach 1$. character - currency want convert : numeric values (integer) row expressed currency. timestamp POSIXct - corresponding date (YYYY-MM-DD).","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_changes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Latest Exchange Rates For Devises — get_changes","text":"Return data.frame additionnal attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest obs. dataset. date.end POSIXct - recent date dataset. date.dif numeric & difftime - number seconds date.begin date.end.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_changes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Latest Exchange Rates For Devises — get_changes","text":"Source : https://query2.finance.yahoo.com/v8/finance/chart/","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/get_changes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Latest Exchange Rates For Devises — get_changes","text":"","code":"# Latest exchange rates from € and ¥ to $ (default convert to 'USD\") df <- get_changes(from = c(\"EUR\", \"JPY\")) str(df) #> 'data.frame':\t2 obs. of  18 variables: #>  $ currency            : chr  \"USD\" \"USD\" #>  $ symbol              : chr  \"EURUSD=X\" \"JPYUSD=X\" #>  $ exchangename        : chr  \"CCY\" \"CCY\" #>  $ instrumenttype      : chr  \"CURRENCY\" \"CURRENCY\" #>  $ firsttradedate      : POSIXct, format: \"2003-12-01\" \"1996-10-30\" #>  $ gmtoffset           : int  3600 3600 #>  $ timezone            : chr  \"BST\" \"BST\" #>  $ exchangetimezonename: chr  \"Europe/London\" \"Europe/London\" #>  $ regularmarketprice  : num  1.0908 0.0069 #>  $ regularmarketdayhigh: num  1.0916 0.0069 #>  $ regularmarketdaylow : num  1.088 0.0069 #>  $ fiftytwoweekhigh    : num  1.1212 0.0072 #>  $ fiftytwoweeklow     : num  1.0184 0.0062 #>  $ previousclose       : num  1.1052 0.0069 #>  $ regular_timezone    : chr  \"BST\" \"BST\" #>  $ from                : chr  \"EUR\" \"JPY\" #>  $ to                  : chr  \"USD\" \"USD\" #>  $ timestamp           : POSIXct, format: \"2025-04-06 21:39:35\" \"2025-04-06 21:40:05\" #>  - attr(*, \"n.currencies\")= int 3 #>  - attr(*, \"currencies\")= chr [1:3] \"EUR\" \"JPY\" \"USD\" #>  - attr(*, \"exchange\")= chr [1:2] \"EUR => USD\" \"JPY => USD\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE #>  - attr(*, \"date.begin\")= POSIXct[1:1], format: \"2025-04-06 21:39:35\" #>  - attr(*, \"date.end\")= POSIXct[1:1], format: \"2025-04-06 21:40:05\" #>  - attr(*, \"date.dif\")= 'difftime' int 30 #>   ..- attr(*, \"units\")= chr \"secs\" # User could pass a named list of character df2 <- get_changes(from = c(\"EUR\" = \"RON\", \"USD\" = \"EUR\")) # Or pass paired values as 2 list (equivalent to hereabove line) : same_as_df2 <- get_changes(from = c(\"EUR\", \"USD\"), to =c(\"RON\" , \"EUR\"))"},{"path":"https://clement-lvd.github.io/financr/reference/get_changes_historic.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Historic of Exchange Rates For Devises — get_changes_historic","title":"Get Historic of Exchange Rates For Devises — get_changes_historic","text":"Get data.frame historical values exchanges rates, given currencies exchange. Default parameters return period 1 year (1 obs. per day) convert USD.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_changes_historic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Historic of Exchange Rates For Devises — get_changes_historic","text":"","code":"get_changes_historic(   from = NULL,   to = \"USD\",   interval = \"1d\",   range = \"1y\",   .verbose = T )"},{"path":"https://clement-lvd.github.io/financr/reference/get_changes_historic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Historic of Exchange Rates For Devises — get_changes_historic","text":"default = NULL character string representing base currency (e.g., \"USD\"). user must provide values one following method : passing paired character list, e.g., c(\"EUR\" = \"USD\", \"RON\" = \"EUR\") ; passing one several values : associated single value, e.g., = c('EUR', \"RON\"), = \"USD\" associated list values length, e.g., = c('EUR', \"RON\"), = c(\"USD\", \"EUR\") . default = \"USD\" character string representing target currencies, e.g., c(\"EUR\", \"USD\"). interval character, default = \"1d\". interval 2 rows time.series answered range character, default = \"1y\". period covered time series. .verbose logical TRUE, messages displayed, e.g., invalid symbols detected. Default FALSE.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_changes_historic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Historic of Exchange Rates For Devises — get_changes_historic","text":"data.frame containing historical exchanges rates given period (default daily results year). columns : timestamp POSIXct opening price period (default day). close numeric closing price period (default day). low numeric highest price period (default day). open integer traded volume. high numeric lowest price period (default day). character, currency converted another, e.g., value 1$ ('USD'), want receive certain amount currency reach 1$. character, currency want convert : numeric values (integer) line data.frame expressed currency. Depending desired interval, recent observation truncated, e.g., '5y' range  '1d' interval answer approximately 30 days values 5 years ago.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_changes_historic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Historic of Exchange Rates For Devises — get_changes_historic","text":"pair '' '' currency, returns data.frame historical exchanges rates given period (default daily results year)","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_changes_historic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Historic of Exchange Rates For Devises — get_changes_historic","text":"Source : https://query2.finance.yahoo.com/v8/finance/chart/","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/get_changes_historic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Historic of Exchange Rates For Devises — get_changes_historic","text":"","code":"days <- get_changes_historic(from = c(\"EUR\", \"JPY\")) days_bis <- get_changes_historic(from = c(\"EUR\" = \"RON\", \"USD\" = \"EUR\")) # Or pass paired values as 2 list (equivalent to hereabove line) : same_as_days_bis <- get_changes_historic(from = c(\"EUR\", \"USD\"), to =c(\"RON\" , \"EUR\")) months <- get_changes_historic(from = c(\"EUR\", \"JPY\"), interval = \"1mo\", range = '5y')"},{"path":"https://clement-lvd.github.io/financr/reference/get_historic.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Historical Financial Data For Ticker Symbols — get_historic","title":"Get Historical Financial Data For Ticker Symbols — get_historic","text":"Get historic stock market data financial ticker symbols, e.g., values closing day.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_historic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Historical Financial Data For Ticker Symbols — get_historic","text":"","code":"get_historic(symbols = c(\"SAAB-B.ST\"), wait.time = 0, .verbose = T, ...)"},{"path":"https://clement-lvd.github.io/financr/reference/get_historic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Historical Financial Data For Ticker Symbols — get_historic","text":"symbols character character string representing financial indices search , e.g., ticker symbol(s). wait.time double, default = 0 character string representing additional waiting time 2 calls Yahoo API. .verbose logical, default = TRUE. TRUE, send messages console. ... Arguments passed get_yahoo_data symbol character character string representing symbol financial instrument (e.g., \"AAPL\" Apple). start_date character character string representing start date R date format (UTC time). NULL, data starts 1970-01-01. end_date character character string representing end date valid R date format (UTC time). NULL, data retrieved current date. range character character string representing range returned datas : default return daily values.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_historic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Historical Financial Data For Ticker Symbols — get_historic","text":"data frame containing historical financial data following columns: open numeric opening price period (default day). close numeric closing price period (default day). low numeric lowest price period (default day). high numeric highest price period (default day). volume integer traded volume. timestamp integer Unix timestamps corresponding data point. date POSIXct day financial data point. currency character currency data reported, depending marketplace. symbol character stock financial instrument symbol (e.g., \"AAPL\"). shortname character abbreviated name company financial instrument. longname character full name company financial instrument. exchangename character name exchange marketplace financial instrument listed. fullexchangename character full name exchange marketplace. timezone character timezone data reported. gmtoffset integer UNIX timestamp difference market local time GMT time. regularMarketPrice numeric actual price market open, last closing price . fiftyTwoWeekLow numeric  Lowest price last 52 weeks. fiftyTwoWeekHigh numeric Highest price last 52 weeks. regularMarketDayHigh numeric highest price day (local exchange place day). regularMarketDayLow numeric  lowest price day (local exchange place day).","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_historic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Historical Financial Data For Ticker Symbols — get_historic","text":"Return data.frame additionnal attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest obs. dataset. date.end POSIXct - recent date dataset. date.dif numeric & difftime - number seconds date.begin date.end.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_historic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Historical Financial Data For Ticker Symbols — get_historic","text":"Source : https://query1.finance.yahoo.com/v8/finance/chart/ #example : data <- get_yahoo_data(symbol = \"SAAB-B.ST\", start_date = \"2020-01-01\", range = \"1d\")","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/get_historic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Historical Financial Data For Ticker Symbols — get_historic","text":"","code":"datas <- get_historic(symbols = c(\"VOLCAR-B.ST\", \"SAAB-B.ST\") ) str(datas) #> 'data.frame':\t1020 obs. of  20 variables: #>  $ open                : num  17.9 18 17.9 18 17.9 ... #>  $ close               : num  18 18 18 17.9 17.9 ... #>  $ low                 : num  17.9 17.9 17.9 17.9 17.9 ... #>  $ high                : num  18 18 18 18 17.9 ... #>  $ volume              : int  0 11151 41948 25162 34751 20044 55114 8305 46299 34030 ... #>  $ timestamp           : int  1743750000 1743750060 1743750120 1743750180 1743750240 1743750300 1743750360 1743750420 1743750480 1743750540 ... #>  $ date                : POSIXct, format: \"2025-04-04 07:00:00\" \"2025-04-04 07:01:00\" ... #>  $ currency            : chr  \"SEK\" \"SEK\" \"SEK\" \"SEK\" ... #>  $ symbol              : chr  \"VOLCAR-B.ST\" \"VOLCAR-B.ST\" \"VOLCAR-B.ST\" \"VOLCAR-B.ST\" ... #>  $ shortname           : chr  \"Volvo Car AB ser. B\" \"Volvo Car AB ser. B\" \"Volvo Car AB ser. B\" \"Volvo Car AB ser. B\" ... #>  $ longname            : chr  \"Volvo Car AB (publ.)\" \"Volvo Car AB (publ.)\" \"Volvo Car AB (publ.)\" \"Volvo Car AB (publ.)\" ... #>  $ exchangename        : chr  \"STO\" \"STO\" \"STO\" \"STO\" ... #>  $ fullexchangename    : chr  \"Stockholm\" \"Stockholm\" \"Stockholm\" \"Stockholm\" ... #>  $ timezone            : chr  \"CEST\" \"CEST\" \"CEST\" \"CEST\" ... #>  $ gmtoffset           : int  7200 7200 7200 7200 7200 7200 7200 7200 7200 7200 ... #>  $ regularmarketprice  : num  17.7 17.7 17.7 17.7 17.7 ... #>  $ fiftytwoweeklow     : num  17.2 17.2 17.2 17.2 17.2 ... #>  $ fiftytwoweekhigh    : num  44.8 44.8 44.8 44.8 44.8 ... #>  $ regularmarketdaylow : num  17.2 17.2 17.2 17.2 17.2 ... #>  $ regularmarketdayhigh: num  18.4 18.4 18.4 18.4 18.4 ... #>  - attr(*, \"n.currencies\")= int 1 #>  - attr(*, \"currencies\")= chr \"SEK\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE #>  - attr(*, \"date.begin\")= int 1743750000 #>  - attr(*, \"date.end\")= int 1743780540 #>  - attr(*, \"date.dif\")= int 30540"},{"path":"https://clement-lvd.github.io/financr/reference/get_historic_light.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Historical Financial Data For Ticker Symbols — get_historic_light","title":"Get Historical Financial Data For Ticker Symbols — get_historic_light","text":"Get historic stock market data financial ticker symbols, e.g., values closing day.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_historic_light.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Historical Financial Data For Ticker Symbols — get_historic_light","text":"","code":"get_historic_light(   symbols = \"SAAB-B.ST\",   interval = \"1d\",   range = \"1mo\",   .verbose = F )"},{"path":"https://clement-lvd.github.io/financr/reference/get_historic_light.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Historical Financial Data For Ticker Symbols — get_historic_light","text":"symbols character character string representing financial indices search , e.g., ticker symbol(s). interval character, default = \"1d\". interval 2 rows time.series answered range character, default = \"1y\". period covered time series. .verbose logical, default = TRUE. TRUE, send messages console.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_historic_light.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Historical Financial Data For Ticker Symbols — get_historic_light","text":"data.frame historical values : symbol character - Financial ticker symbol. timestamp POSIXct - Date observation (closing price). close numeric - Closing price asset.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_historic_light.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Historical Financial Data For Ticker Symbols — get_historic_light","text":"","code":"histo_light <- get_historic_light(c(\"SAAB-B.ST\", \"AAPL\"))"},{"path":"https://clement-lvd.github.io/financr/reference/get_similar.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Similar Financial Symbols — get_similar","title":"Find Similar Financial Symbols — get_similar","text":"Given symbol(s), retrieve identical symbols (according Yahoo Finance) score similarity.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_similar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Similar Financial Symbols — get_similar","text":"","code":"get_similar(symbols = \"SAAB-B.ST\", .verbose = F, ...)"},{"path":"https://clement-lvd.github.io/financr/reference/get_similar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Similar Financial Symbols — get_similar","text":"symbols character character string representing financial symbol search. .verbose logical TRUE, messages displayed invalid symbols detected. Default TRUE. ... symbols (char. list char.)","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_similar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Similar Financial Symbols — get_similar","text":"data.frame symbols associated provided user similarity scores, according Yahoo Finance. character - Financial symbol provided user. symbol character - Symbol associated '' symbol. score numeric - Similarity score, according Yahoo Finance.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_similar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find Similar Financial Symbols — get_similar","text":"Source : https://query2.finance.yahoo.com/v6/finance/quote/validate","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_similar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Similar Financial Symbols — get_similar","text":"","code":"get_similar(symbols =   \"AAPL,GOOGL\") #>          from symbol    score #> AAPL.1   AAPL   AMZN 0.294944 #> AAPL.2   AAPL   TSLA 0.278101 #> AAPL.3   AAPL   GOOG 0.261226 #> AAPL.4   AAPL   META 0.250701 #> AAPL.5   AAPL   MSFT 0.210578 #> GOOGL.1 GOOGL   BABA 0.121617 #> GOOGL.2 GOOGL   NFLX 0.120005 #> GOOGL.3 GOOGL   PYPL 0.118386 #> GOOGL.4 GOOGL      V 0.118228 #> GOOGL.5 GOOGL   META 0.117542 get_similar(symbols =   c(\"AAPL\", \"GOOGL\")) #>          from symbol    score #> AAPL.1   AAPL   AMZN 0.294944 #> AAPL.2   AAPL   TSLA 0.278101 #> AAPL.3   AAPL   GOOG 0.261226 #> AAPL.4   AAPL   META 0.250701 #> AAPL.5   AAPL   MSFT 0.210578 #> GOOGL.1 GOOGL   BABA 0.121617 #> GOOGL.2 GOOGL   NFLX 0.120005 #> GOOGL.3 GOOGL   PYPL 0.118386 #> GOOGL.4 GOOGL      V 0.118228 #> GOOGL.5 GOOGL   META 0.117542"},{"path":"https://clement-lvd.github.io/financr/reference/get_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve latest financial data — get_values","title":"Retrieve latest financial data — get_values","text":"Get latest insights, given financial symbols. Data latest prices trading context returned.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve latest financial data — get_values","text":"","code":"get_values(symbols = c(\"AAPL\", \"GOOGL\"), .verbose = F)"},{"path":"https://clement-lvd.github.io/financr/reference/get_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve latest financial data — get_values","text":"symbols Character vector. One asset symbols (e.g., c(\"AAPL\", \"GOOGL\")). .verbose Logical. TRUE, displays verbose output fetching process. Default FALSE.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve latest financial data — get_values","text":"data.frame 1 row per valid financial symbol 21 columns, including: currency character - Trading currency asset (e.g., \"USD\"). symbol character - Symbol asset, e.g., ticker symbol. exchangename character - Abbreviated exchange place financial instrument name. fullexchangename character - Full name exchange place financial instrument. instrumenttype character - Type financial instrument (e.g., \"EQUITY\"). firsttradedate POSIXct - Datetime asset first traded. regularmarkettime POSIXct - Timestamp latest regular market quote. hasprepostmarketdata logical - Indicates pre/post-market data available. gmtoffset integer - Offset GMT seconds. timezone character - Abbreviated timezone name market. exchangetimezonename character - Timezone name exchange location. regularmarketprice numeric   - Latest regular market trading price. fiftytwoweekhigh numeric   - highest price 52-weeks period. fiftytwoweeklow numeric   - lowest price  52-weeks period. regularmarketdayhigh numeric   - Highest price current market day. regularmarketdaylow numeric   - Lowest price current market day. regularmarketvolume integer   - Volume traded current market day. shortname character - Shortened common name asset. chartpreviousclose numeric   - Closing price shown charts. previousclose numeric   - Previous official market close price.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve latest financial data — get_values","text":"Return data.frame additionnal attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest obs. dataset. date.end POSIXct - recent date dataset. date.dif numeric & difftime - number seconds date.begin date.end.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_values.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Retrieve latest financial data — get_values","text":"Source : https://query2.finance.yahoo.com/v8/finance/chart/","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve latest financial data — get_values","text":"","code":"get_values(c(\"AAPL\", \"GOOGL\",\"SAAB-B.ST\")) #>   currency    symbol exchangename fullexchangename instrumenttype #> 1      USD      AAPL          NMS         NasdaqGS         EQUITY #> 2      USD     GOOGL          NMS         NasdaqGS         EQUITY #> 3      SEK SAAB-B.ST          STO        Stockholm         EQUITY #>        firsttradedate   regularmarkettime hasprepostmarketdata gmtoffset #> 1 1980-12-12 14:30:00 2025-04-04 20:00:02                 TRUE    -14400 #> 2 2004-08-19 13:30:00 2025-04-04 20:00:03                 TRUE    -14400 #> 3 2000-01-03 08:00:00 2025-04-04 15:29:55                FALSE      7200 #>   timezone exchangetimezonename regularmarketprice fiftytwoweekhigh #> 1      EDT     America/New_York             188.38           260.10 #> 2      EDT     America/New_York             145.60           207.05 #> 3     CEST     Europe/Stockholm             379.40           420.00 #>   fiftytwoweeklow regularmarketdayhigh regularmarketdaylow regularmarketvolume #> 1          164.08               199.88             187.345           125910913 #> 2          145.38               151.05             145.380            62259539 #> 3          203.70               420.00             365.000             6985601 #>        shortname chartpreviousclose previousclose #> 1     Apple Inc.             203.19        203.19 #> 2  Alphabet Inc.             150.72        150.72 #> 3 SAAB AB ser. B             411.65        411.65"},{"path":"https://clement-lvd.github.io/financr/reference/get_yahoo_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Historical Financial Data For a Given Symbol — get_yahoo_data","title":"Get Historical Financial Data For a Given Symbol — get_yahoo_data","text":"Get historical financial values associated ticker symbol. data includes open stock price, high, low, close, volume, along timestamps.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_yahoo_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Historical Financial Data For a Given Symbol — get_yahoo_data","text":"","code":"get_yahoo_data(   symbol = \"AAPL\",   start_date = NULL,   end_date = NULL,   range = \"1d\",   .verbose = T )"},{"path":"https://clement-lvd.github.io/financr/reference/get_yahoo_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Historical Financial Data For a Given Symbol — get_yahoo_data","text":"symbol character character string representing symbol financial instrument (e.g., \"AAPL\" Apple). start_date character character string representing start date R date format (UTC time). NULL, data starts 1970-01-01. end_date character character string representing end date valid R date format (UTC time). NULL, data retrieved current date. range character character string representing range returned datas : default return daily values. .verbose logical TRUE, messages displayed, e.g., invalid symbols detected.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_yahoo_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Historical Financial Data For a Given Symbol — get_yahoo_data","text":"data frame containing historical financial data following columns: open numeric opening price period (default day). close numeric closing price period (default day). low numeric lowest price period (default day). high numeric highest price period (default day). volume integer traded volume. timestamp integer Unix timestamps corresponding data point. date POSIXct day financial data point. currency character currency data reported, depending marketplace. symbol character stock financial instrument symbol (e.g., \"AAPL\"). shortname character abbreviated name company financial instrument. longname character full name company financial instrument. exchangename character name exchange marketplace financial instrument listed. fullexchangename character full name exchange marketplace. timezone character timezone data reported. gmtoffset integer UNIX timestamp difference market local time GMT time. regularMarketPrice numeric actual price market open, last closing price . fiftyTwoWeekLow numeric  Lowest price last 52 weeks. fiftyTwoWeekHigh numeric Highest price last 52 weeks. regularMarketDayHigh numeric highest price day (local exchange place day). regularMarketDayLow numeric  lowest price day (local exchange place day).","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_yahoo_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Historical Financial Data For a Given Symbol — get_yahoo_data","text":"default data.frame line day. user provide another range '1d' (one day), lines filtered , order match desired range. Valid ranges : \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\". function allows user specify date range using start end dates. date range specified, retrieves available data beginning time (default start) current date (default end).","code":""},{"path":"https://clement-lvd.github.io/financr/reference/get_yahoo_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Historical Financial Data For a Given Symbol — get_yahoo_data","text":"Source : https://query1.finance.yahoo.com/v8/finance/chart/ #example : data <- get_yahoo_data(symbol = \"SAAB-B.ST\", start_date = \"2020-01-01\", range = \"1d\")","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_crypto.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Latest Cryptocurrencies Values (USD) and Market Data — last_crypto","title":"Get Latest Cryptocurrencies Values (USD) and Market Data — last_crypto","text":"Return data.frame latest financial data 100 cryptocurrencies, e.g., actual values cryptocurrency USD.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_crypto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Latest Cryptocurrencies Values (USD) and Market Data — last_crypto","text":"","code":"last_crypto(keep = NULL, .verbose = T)"},{"path":"https://clement-lvd.github.io/financr/reference/last_crypto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Latest Cryptocurrencies Values (USD) and Market Data — last_crypto","text":"keep character vector symbols filter results (perl expression, ignoring case). NULL (default), filtering applied, available indices returned. .verbose logical, default = TRUE. TRUE, send messages console necessary.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_crypto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Latest Cryptocurrencies Values (USD) and Market Data — last_crypto","text":"data frame 100 observations 13 variables: symbol character - Cryptocurrency ticker symbol. name character - Name cryptocurrency, along quoted 'real-world' currency. price numeric - Current price cryptocurrency USD ($). change numeric - Absolute price change USD since last closing exchange place. change_percent numeric - Percentage price change since last closing exchange place (%). market_cap numeric - Total market capitalization cryptocurrency. volume numeric - 24-hour trading volume. volume_in_currency_24hr numeric - 24-hour trading volume associated 'real-world' currency (time redundant volume column). total_volume_all_currencies_24hr numeric - 24-hour total trading volume across currency pairs. circulating_supply numeric - Total circulating supply cryptocurrency. X52_wk_change_percent numeric - Percentage change price last 52 weeks (%). character, currency converted another, e.g., value 1$ ('USD'), want receive certain amount currency reach 1$. character, currency want convert : numeric values (integer) line data.frame expressed currency.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_crypto.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Latest Cryptocurrencies Values (USD) and Market Data — last_crypto","text":"Return data.frame additionnal attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest obs. dataset. date.end POSIXct - recent date dataset. date.dif numeric & difftime - number seconds date.begin date.end.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_crypto.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Latest Cryptocurrencies Values (USD) and Market Data — last_crypto","text":"Source : Yahoo Finance 'crypto' page, https://finance.yahoo.com/markets/crypto//","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/last_crypto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Latest Cryptocurrencies Values (USD) and Market Data — last_crypto","text":"","code":"krypto <- last_crypto() head(krypto) #>     symbol            name        price      change change_percent  market_cap #> 1  BTC-USD     Bitcoin USD 79093.410000 -3.9780e+03          -4.79 1.57000e+12 #> 2  ETH-USD    Ethereum USD  1592.760000 -1.9829e+02         -11.07 1.92201e+11 #> 3 USDT-USD Tether USDt USD     0.999417 -1.6500e-04          -0.02 1.44003e+11 #> 4  XRP-USD         XRP USD     1.970800 -1.6030e-01          -7.52 1.14848e+11 #> 5  BNB-USD         BNB USD   554.640000 -3.7080e+01          -6.27 7.90210e+10 #> 6 USDC-USD    USD Coin USD     0.999940 -2.0000e-05           0.00 6.03870e+10 #>       volume volume_in_currency_24hr total_volume_all_currencies_24hr #> 1 2.7721e+10              2.7721e+10                       2.7721e+10 #> 2 1.8238e+10              1.8238e+10                       1.8238e+10 #> 3 6.1061e+10              6.1061e+10                       6.1061e+10 #> 4 3.8300e+09              3.8300e+09                       3.8300e+09 #> 5 1.3490e+09              1.3490e+09                       1.3490e+09 #> 6 9.3330e+09              9.3330e+09                       9.3330e+09 #>   circulating_supply x52_wk_change_percent from  to #> 1        1.98480e+07                 20.39  BTC USD #> 2        1.20672e+08                -47.71  ETH USD #> 3        1.44087e+11                 -0.03 USDT USD #> 4        5.82750e+10                260.39  XRP USD #> 5        1.42471e+08                  1.54  BNB USD #> 6        6.03910e+10                  0.01 USDC USD"},{"path":"https://clement-lvd.github.io/financr/reference/last_currencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Currencies Names, Symbols and Add Latest 'USD' Values — last_currencies","title":"Get Currencies Names, Symbols and Add Latest 'USD' Values — last_currencies","text":"Return data.frame financial indices (currencies) given vector symbols, e.g., 'EUR'. Optionally, can filter results add last market price ('USD') currencies.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_currencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Currencies Names, Symbols and Add Latest 'USD' Values — last_currencies","text":"","code":"last_currencies(keep = NULL, add_usd_values = F, .verbose = T)"},{"path":"https://clement-lvd.github.io/financr/reference/last_currencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Currencies Names, Symbols and Add Latest 'USD' Values — last_currencies","text":"keep character vector symbols filter results (perl expression, ignoring case). NULL (default), filtering applied, available indices returned. add_usd_values logical, default = FALSE. TRUE, add latest market values ('USD') get_changes(). See get_changes() base structure. .verbose logical, default = TRUE. TRUE, send messages console necessary.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_currencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Currencies Names, Symbols and Add Latest 'USD' Values — last_currencies","text":"data frame containing unique financial indices (currencies). table columns like symbol, name, relevant information, column names lowercase. keep specified, matching currencies returned. add_usd_values specified, last financial insights get_changes() added, e.g., last market values currency ('USD')","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_currencies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Currencies Names, Symbols and Add Latest 'USD' Values — last_currencies","text":"Return data.frame additionnal attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest obs. dataset. date.end POSIXct - recent date dataset. date.dif numeric & difftime - number seconds date.begin date.end.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_currencies.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Currencies Names, Symbols and Add Latest 'USD' Values — last_currencies","text":"Source : https://query2.finance.yahoo.com/v1/finance/currencies","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/last_currencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Currencies Names, Symbols and Add Latest 'USD' Values — last_currencies","text":"","code":"# Fetch all available indices all_indices <- last_currencies()  # Fetch only specific indices selected_indices <- last_currencies(keep = c(\"^Z\", \"EUR\"))"},{"path":"https://clement-lvd.github.io/financr/reference/last_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get World Financial Indices Latest Values (USD) — last_indices","title":"Get World Financial Indices Latest Values (USD) — last_indices","text":"Get latest stock market indices values data 40 world-indices, e.g., latest prices, change percentage change.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get World Financial Indices Latest Values (USD) — last_indices","text":"","code":"last_indices(.verbose = T, keep = NULL)"},{"path":"https://clement-lvd.github.io/financr/reference/last_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get World Financial Indices Latest Values (USD) — last_indices","text":".verbose logical, default = TRUE. TRUE, send messages console necessary. keep character vector symbols filter results (perl expression, ignoring case). NULL (default), filtering applied, available indices returned.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get World Financial Indices Latest Values (USD) — last_indices","text":"data frame following columns: symbol character - Ticker symbol index, aka world indices (e.g., ^GSPC S&P 500). name character -  Full name index (e.g., \"S&P 500\"). price numeric - Current value index (USD). change numeric - Absolute change index value since last closing exchange place. change_percent numeric - Percentage change index value since last closing exchange place. volume numeric - total trading volume index components. currency character - Currency associated world-indice, .e. 'USD'.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_indices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get World Financial Indices Latest Values (USD) — last_indices","text":"Return data.frame additionnal attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest obs. dataset. date.end POSIXct - recent date dataset. date.dif numeric & difftime - number seconds date.begin date.end.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_indices.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get World Financial Indices Latest Values (USD) — last_indices","text":"Source : Yahoo's world indices page - https://finance.yahoo.com/markets/world-indices","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/last_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get World Financial Indices Latest Values (USD) — last_indices","text":"","code":"if (FALSE) { # \\dontrun{ indices <- last_indices() head(indices) } # }"},{"path":"https://clement-lvd.github.io/financr/reference/last_market_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Market Index Summary Latest Data — last_market_summary","title":"Retrieve Market Index Summary Latest Data — last_market_summary","text":"Return data.frame latest summary information set major financial market indices.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_market_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Market Index Summary Latest Data — last_market_summary","text":"","code":"last_market_summary(region = NULL, .verbose = TRUE)"},{"path":"https://clement-lvd.github.io/financr/reference/last_market_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Market Index Summary Latest Data — last_market_summary","text":"region character, default = NULL (filtering) - Select region filter results. .verbose logical, default = FALSE - Logical flag indicating whether print verbose output debugging informational purposes.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_market_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Market Index Summary Latest Data — last_market_summary","text":"data frame 15 rows 38 variables. row corresponds market index includes following information: symbol, shortname, longname, exchange, region, currency Market time info: regularmarkettime_raw, regularmarkettime_fmt Market pricing info: regularmarketprice_raw, regularmarketchange_raw, regularmarketchangepercent_raw, etc. Metadata marketstate, quotetype, pricehint, exchangedatadelayedby, hasprepostmarketdata fields cryptotradeable, tradeable, triggerable, contracts, etc.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/last_market_summary.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Retrieve Market Index Summary Latest Data — last_market_summary","text":"Source : https://query2.finance.yahoo.com/v6/finance/quote/marketSummary","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/last_market_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Market Index Summary Latest Data — last_market_summary","text":"","code":"df <- last_market_summary()  df_fr <- last_market_summary(region = \"FR\")"},{"path":"https://clement-lvd.github.io/financr/reference/search_assets.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Financial Asset From Keywords (Multiple Texts) — search_assets","title":"Search Financial Asset From Keywords (Multiple Texts) — search_assets","text":"Get ticker symbols associated free texts, companies names. Several ticker symbols associated various exchanges places returned, companies names, sector/category (available), etc.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/search_assets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Financial Asset From Keywords (Multiple Texts) — search_assets","text":"","code":"search_assets(   texts,   exchange = NULL,   type = NULL,   add_latest_values = F,   .verbose = F )"},{"path":"https://clement-lvd.github.io/financr/reference/search_assets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Financial Asset From Keywords (Multiple Texts) — search_assets","text":"texts character character string list character representing text(s) search , e.g., company names. exchange character (optionnal) - character string representing exchange place(s) consider - exact match, e.g., 'STO' (Stockholm stock exchange). Default keep results. type (optionnal) character string representing type asset search ('quotetype' column value used filter results). Case insensitive. add_latest_values logical, default = FALSE - TRUE, search values symbols add columns get_values() .verbose logical, default = FALSE TRUE, messages displayed, e.g., invalid symbols detected.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/search_assets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Financial Asset From Keywords (Multiple Texts) — search_assets","text":"data frame following columns: symbol character - ticker symbol associated asset, e.g., \"VTI\", \"^DWCPF\". shortname character - short name asset, e.g., ETF index name. longname character - full name asset, full ETF index name - sometimes returned Yahoo. exchange character - exchange asset listed, e.g., \"PCX\", \"DJI\", \"NGM\". exchdisp character - full name exchange place asset traded, e.g., \"NYSEArca\", \"Dow Jones\". quoteType character - type asset, e.g., \"FUTURES\", \"INDEX\". typeDisp character - type asset, formatted display, e.g., \"Futures\", \"Index\"). score numeric - numerical score assigned Yahoo order indicate relevance matched result, .e. similarity text. isYahooFinance logical - Indicates whether symbol recognized Yahoo Finance - always TRUE context. searched character - text searched Yahoo API, e.g., \"Dow Jones\".","code":""},{"path":"https://clement-lvd.github.io/financr/reference/search_assets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search Financial Asset From Keywords (Multiple Texts) — search_assets","text":"Return data.frame additionnal attributes: n.currencies integer - Number unique currencies data.frame. currencies character - vector currency symbols data.frame (e.g., \"BTC\", \"ETH\", \"USD\"). exchange character - vector exchange pairs (e.g., \"BTC => USD\"). applicable, NULL (entry). date.fetch Date - date data retrieved, set using Sys.Date(). crypto logical - TRUE cryptocurrencies present, otherwise FALSE. date.begin POSIXct - oldest obs. dataset. date.end POSIXct - recent date dataset. date.dif numeric & difftime - number seconds date.begin date.end.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/search_assets.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search Financial Asset From Keywords (Multiple Texts) — search_assets","text":"Source : https://query2.finance.yahoo.com/v1/","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/financr/reference/search_assets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search Financial Asset From Keywords (Multiple Texts) — search_assets","text":"","code":"indices <- search_assets(texts = c(\"Dow jones\", \"euronext\"), type = \"index\" )  swed <- search_assets(c(\"VOLVO car\", \"RENAULT\"),  exchange = c(\"STO\", \"PAR\")) head(swed) #>        symbol           shortname             longname exchange  exchdisp #> 1 VOLCAR-B.ST Volvo Car AB ser. B Volvo Car AB (publ.)      STO Stockholm #> 9      RNO.PA             RENAULT           Renault SA      PAR     Paris #>   quotetype typedisp score isyahoofinance  searched #> 1    EQUITY   Equity 20004           TRUE volvo car #> 9    EQUITY   Equity 20006           TRUE   renault  swed_last_values <- search_assets(c(\"VOLVO car\", \"SAAB\") ,  exchange = \"STO\", add_latest_values = TRUE )  str(swed_last_values) #> 'data.frame':\t1 obs. of  28 variables: #>  $ symbol              : chr \"VOLCAR-B.ST\" #>  $ shortname           : chr \"Volvo Car AB ser. B\" #>  $ longname            : chr \"Volvo Car AB (publ.)\" #>  $ exchange            : chr \"STO\" #>  $ exchdisp            : chr \"Stockholm\" #>  $ quotetype           : chr \"EQUITY\" #>  $ typedisp            : chr \"Equity\" #>  $ score               : num 20004 #>  $ isyahoofinance      : logi TRUE #>  $ searched            : chr \"volvo car\" #>  $ currency            : chr \"SEK\" #>  $ exchangename        : chr \"STO\" #>  $ fullexchangename    : chr \"Stockholm\" #>  $ instrumenttype      : chr \"EQUITY\" #>  $ firsttradedate      : POSIXct, format: \"2021-10-29 07:00:00\" #>  $ regularmarkettime   : POSIXct, format: \"2025-04-04 15:29:38\" #>  $ hasprepostmarketdata: logi FALSE #>  $ gmtoffset           : int 7200 #>  $ timezone            : chr \"CEST\" #>  $ exchangetimezonename: chr \"Europe/Stockholm\" #>  $ regularmarketprice  : num 17.7 #>  $ fiftytwoweekhigh    : num 44.8 #>  $ fiftytwoweeklow     : num 17.2 #>  $ regularmarketdayhigh: num 18.4 #>  $ regularmarketdaylow : num 17.2 #>  $ regularmarketvolume : int 10297687 #>  $ chartpreviousclose  : num 17.8 #>  $ previousclose       : num 17.8 #>  - attr(*, \"n.currencies\")= int 1 #>  - attr(*, \"currencies\")= chr \"SEK\" #>  - attr(*, \"date.fetch\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE #>  - attr(*, \"date.begin\")= POSIXct[1:1], format: \"2025-04-04 15:29:38\" #>  - attr(*, \"date.end\")= POSIXct[1:1], format: \"2025-04-04 15:29:38\" #>  - attr(*, \"date.dif\")= 'difftime' int 0 #>   ..- attr(*, \"units\")= chr \"secs\""},{"path":"https://clement-lvd.github.io/financr/reference/search_assets_quick.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Financial Assets From Keyword(s) — search_assets_quick","title":"Search Financial Assets From Keyword(s) — search_assets_quick","text":"Search financial data based texts retrieve asset symbol(s), name(s), exchanges place(s), asset type(s).","code":""},{"path":"https://clement-lvd.github.io/financr/reference/search_assets_quick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Financial Assets From Keyword(s) — search_assets_quick","text":"","code":"search_assets_quick(   texts = \"Dow Jones\",   .verbose = TRUE,   region = NULL,   lang = \"en\" )"},{"path":"https://clement-lvd.github.io/financr/reference/search_assets_quick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Financial Assets From Keyword(s) — search_assets_quick","text":"texts character string representing search texts. can company name, index, financial term. Default \"Dow Jones\". .verbose logical TRUE, print additional details search process. Default TRUE. region character string specifying region search (e.g., \"US\", \"EU\"). Default NULL, meaning region filter applied. lang character string specifying language data returned. Default \"en\" English.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/search_assets_quick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Financial Assets From Keyword(s) — search_assets_quick","text":"data.frame assets symbols names. symbol: financial symbol (e.g., stock ticker index). name: full name financial entity (e.g., 'Dow Jones Industrial Average'). exch: exchange symbol listed (e.g., 'DJI', 'CBT'). type: type financial instrument (e.g., Index, F Futures, E Exchange Traded Fund). exchdisp: exchange name displayed (e.g., 'Dow Jones'). typedisp: long name type financial instrument (e.g., 'Index', 'Futures' 'ETF' 'Exchange Traded Fund').","code":""},{"path":"https://clement-lvd.github.io/financr/reference/search_assets_quick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search Financial Assets From Keyword(s) — search_assets_quick","text":"","code":"if (FALSE) { # \\dontrun{ # Example of searching for financial data related to \"Dow Jones\" results <- search_assets_quick(texts = \"Dow Jones\") } # }"},{"path":"https://clement-lvd.github.io/financr/reference/valid_symbol.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Financial Symbols — valid_symbol","title":"Validate Financial Symbols — valid_symbol","text":"Checks validity one multiple financial symbols using Yahoo Finance's validation API. Return data.frame boolean values indicating whether symbol recognized Yahoo Finance.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/valid_symbol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Financial Symbols — valid_symbol","text":"","code":"valid_symbol(symbols = NULL, ..., .verbose = T)"},{"path":"https://clement-lvd.github.io/financr/reference/valid_symbol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Financial Symbols — valid_symbol","text":"symbols character string list character strings representing financial symbols validate. ... symbols (char. list char.) .verbose logical TRUE, messages displayed invalid symbols detected. Default TRUE.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/valid_symbol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Financial Symbols — valid_symbol","text":"boolean table one row many columns number unique symbols provided user. column corresponds symbol, TRUE Yahoo Finance recognizes symbol, FALSE otherwise.","code":""},{"path":"https://clement-lvd.github.io/financr/reference/valid_symbol.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Validate Financial Symbols — valid_symbol","text":"Source : https://query2.finance.yahoo.com/v6/finance/quote/validate","code":""},{"path":"https://clement-lvd.github.io/financr/reference/valid_symbol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Financial Symbols — valid_symbol","text":"","code":"valid_symbol(\"AAPL,GOOGL\") #>   GOOGL AAPL #> 1  TRUE TRUE valid_symbol(symbols = c(\"CDF\", \"SCR\", \"INVALID\")) #> Invalid financial symbol(s) : CDF, SCR, INVALID #>     CDF   SCR INVALID #> 1 FALSE FALSE   FALSE"}]
