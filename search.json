[{"path":"https://clement-lvd.github.io/financr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 financr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://clement-lvd.github.io/financr/articles/Functions_summary.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Summary of financr Functions","text":"Inputs. function expects specific type input, based prefix. Outputs. 'financr' functions return standardized data.frame (see last section ‘Standardized Return Conventions’). Functions '_historic' suffix return historic financial data, others retrieve --date data latest financial insights.","code":""},{"path":"https://clement-lvd.github.io/financr/articles/Functions_summary.html","id":"details","dir":"Articles","previous_headings":"","what":"Details","title":"Summary of financr Functions","text":"last_ family. Functions prefix 'last_' retrieve latest data require input (arguments optional). ‡ : Scraping latest data Yahoo Finance pages, .e. https://finance.yahoo.com/markets/world-indices/ […]/markets/crypto * : Retrieve latest data Yahoo Finance API (https://query2.finance.yahoo.com) search_ family. Functions prefix 'search_' retrieve latest data expect free-text input(s). * : Retrieve latest data Yahoo Finance API (https://query2.finance.yahoo.com) † : Scraping https://finance.yahoo.com/lookup/ get_ family. Functions prefix 'get_' retrieve historical latest financial values, given financial symbol(s) * : Retrieve latest historical data Yahoo Finance API (https://query2.finance.yahoo.com) functions. helper functions * : Retrieve latest data Yahoo Finance API (https://query2.finance.yahoo.com)","code":""},{"path":"https://clement-lvd.github.io/financr/articles/Functions_summary.html","id":"standardized-return-conventions","dir":"Articles","previous_headings":"","what":"Standardized Return Conventions","title":"Summary of financr Functions","text":"Regarding data.frame returned 'financr' functions: column names : following ‘snake_case’ conventions, e.g., lowercase without spaces; symbols replaced (e.g., “%’ replaced ‘percent’); Within returned data.frame, numeric values returned integer numeric class values. Thus, texts answered Yahoo Finance API converted numeric values, e.g., \"1.2M\" turned 1200000 \"85%\" 85. Examples similarities differences 'R packages' Vignette ‘Summary financr Ecosystem’.","code":""},{"path":"https://clement-lvd.github.io/financr/articles/Get_changes.html","id":"get_changes-get_changes_historic","dir":"Articles","previous_headings":"","what":"get_changes() & get_changes_historic()","title":"get_changes","text":"get_changes() compute changes latest exchange rate, given currencies symbols. get_changes_historic() return data.frame historic exchange rates, given currencies symbols (default 1 obs. per day 1 year). Currencies indicated syntax get_changes() , similarly, default converting ‘USD’. E.g., pass named list character vectors, two separate lists equal length. Parameters. Optionally, can tweak returned data.frame using interval range parameters. E.g., retrieve one observation per month five-year period.","code":"library(financr)  changes <- get_changes(from = c(\"RON\", \"USD\"), to = \"EUR\")  changes[ , c(\"from\", \"to\",  \"regularmarketprice\", \"currency\", \"timestamp\")] #>   from  to regularmarketprice currency           timestamp #> 1  RON EUR             0.2002      EUR 2025-04-04 21:28:36 #> 2  USD EUR             0.9122      EUR 2025-04-04 21:29:36 changes <- get_changes_historic(from = c(\"EUR\", \"RON\") )  str(changes) #> 'data.frame':    526 obs. of  7 variables: #>  $ timestamp: POSIXct, format: \"2024-04-03 23:00:00\" \"2024-04-04 23:00:00\" ... #>  $ high     : num  1.09 1.08 1.09 1.09 1.09 ... #>  $ low      : num  1.08 1.08 1.08 1.08 1.07 ... #>  $ close    : num  1.08 1.08 1.08 1.09 1.09 ... #>  $ open     : num  1.08 1.08 1.08 1.09 1.09 ... #>  $ from     : chr  \"EUR\" \"EUR\" \"EUR\" \"EUR\" ... #>  $ to       : chr  \"USD\" \"USD\" \"USD\" \"USD\" ... #>  - attr(*, \"n.currencies\")= int 3 #>  - attr(*, \"currencies\")= chr [1:3] \"EUR\" \"RON\" \"USD\" #>  - attr(*, \"exchange\")= chr [1:2] \"EUR => USD\" \"RON => USD\" #>  - attr(*, \"date\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE df2_days <- get_changes_historic(from = c(\"EUR\" = \"RON\", \"USD\" = \"EUR\"))   same_as_df2_days <- get_changes_historic(from = c(\"EUR\", \"USD\"), to =c(\"RON\" , \"EUR\"))  head(same_as_df2_days, 2) #>             timestamp    open    high     low   close from  to #> 1 2024-04-03 23:00:00 4.96900 4.97048 4.96739 4.96900  EUR RON #> 2 2024-04-04 23:00:00 4.96824 4.96924 4.96509 4.96824  EUR RON df_month <- get_changes_historic(from = c(\"EUR\", \"JPY\"), interval = \"1mo\", range = '5y') str(df_month) #> 'data.frame':    122 obs. of  7 variables: #>  $ timestamp: POSIXct, format: \"2020-04-30 23:00:00\" \"2020-05-31 23:00:00\" ... #>  $ close    : num  1.11 1.12 1.19 1.19 1.17 ... #>  $ open     : num  1.09 1.11 1.12 1.18 1.19 ... #>  $ high     : num  1.11 1.14 1.19 1.2 1.2 ... #>  $ low      : num  1.08 1.11 1.12 1.17 1.16 ... #>  $ from     : chr  \"EUR\" \"EUR\" \"EUR\" \"EUR\" ... #>  $ to       : chr  \"USD\" \"USD\" \"USD\" \"USD\" ... #>  - attr(*, \"n.currencies\")= int 3 #>  - attr(*, \"currencies\")= chr [1:3] \"EUR\" \"JPY\" \"USD\" #>  - attr(*, \"exchange\")= chr [1:2] \"EUR => USD\" \"JPY => USD\" #>  - attr(*, \"date\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE"},{"path":"https://clement-lvd.github.io/financr/articles/Get_changes.html","id":"last_currencies","dir":"Articles","previous_headings":"","what":"last_currencies()","title":"get_changes","text":"last_currencies() return list currencies symbols names. helpful understand currency symbols used Yahoo Finance API, found currency column data.frame returned get_historic(). Parameters. Filter symbols keep parameter /add latest market values (‘USD’) currency add_usd_values parameter.","code":"currencies <- last_currencies() str(currencies) #> 'data.frame':    159 obs. of  4 variables: #>  $ shortname    : chr  \"FJD\" \"MXN\" \"SCR\" \"CDF\" ... #>  $ longname     : chr  \"Fijian Dollar\" \"Mexican Peso\" \"Seychellois Rupee\" \"Congolese Franc\" ... #>  $ symbol       : chr  \"FJD\" \"MXN\" \"SCR\" \"CDF\" ... #>  $ locallongname: chr  \"Fijian Dollar\" \"Mexican Peso\" \"Seychellois Rupee\" \"Congolese Franc\" ... #>  - attr(*, \"date\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE few_currencies <- last_currencies(keep = c(\"RON\",  \"USD\"), add_usd_values = T ) few_currencies #>   symbol shortname     longname locallongname currency exchangename #> 1    RON       RON Romanian Leu  Romanian Leu      USD          CCY #> 2    USD       USD    US Dollar     US Dollar      USD          CCY #>   instrumenttype      firsttradedate gmtoffset timezone exchangetimezonename #> 1       CURRENCY 2005-06-30 23:00:00      3600      BST        Europe/London #> 2       CURRENCY                <NA>      3600      BST        Europe/London #>   regularmarketprice regularmarketdayhigh regularmarketdaylow fiftytwoweekhigh #> 1             0.2202               0.2202              0.2202           0.2258 #> 2             1.0000               1.0000              1.0000           1.0000 #>   fiftytwoweeklow previousclose regular_timezone  to           timestamp #> 1          0.2048        0.2221              BST USD 2025-04-05 23:24:12 #> 2          1.0000        1.0000              BST USD 2025-04-06 13:00:06"},{"path":"https://clement-lvd.github.io/financr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Clément Laverdet. Author, maintainer, copyright holder.","code":""},{"path":"https://clement-lvd.github.io/financr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Laverdet C (2025). financr: Retrieve Financial Data Yahoo Finance. R package version 0.2.0, https://clement-lvd.github.io/financr/, https://github.com/clement-LVD/financr.","code":"@Manual{,   title = {financr: Retrieve Financial Data From Yahoo Finance},   author = {Clément Laverdet},   year = {2025},   note = {R package version 0.2.0,     https://clement-lvd.github.io/financr/},   url = {https://github.com/clement-LVD/financr}, }"},{"path":"https://clement-lvd.github.io/financr/index.html","id":"financr","dir":"","previous_headings":"","what":"An R package for fetching financial data from Yahoo Finance","title":"An R package for fetching financial data from Yahoo Finance","text":"  'financr' retrieves financial data Yahoo Finance : historical market data, e.g., market prices, currency exchange rates. latest insights financial assets companies, major indices, currencies cryptocurrency exchange rates. insights, e.g., validity financial symbol(s) assets associated . See Vignette ‘Summary financr Functions’.","code":""},{"path":"https://clement-lvd.github.io/financr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R package for fetching financial data from Yahoo Finance","text":"can install development version financr:","code":"devtools::install_github(\"clement-LVD/financr\")"},{"path":"https://clement-lvd.github.io/financr/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"An R package for fetching financial data from Yahoo Finance","text":"Get ticker symbol free-texts. Given keyword(s) companies names, search financial ticker symbols financr::search_assets(). retrieve symbols latest values stocks exchange places financr::search_summary(). don’t know ticker symbol asset, exploring results financr::search_summary() search_assets() way find . Get historical financial data. Given ticker symbol(s), get historic financial values financr::get_historic() :","code":"library(financr)  indices <- search_assets(c(\"Dow jones\", \"euronext\"), type = \"index\" )  str(indices) #> 'data.frame':    9 obs. of  10 variables: #>  $ symbol        : chr  \"^DJI\" \"^DWCPF\" \"^DWRTF\" \"ESG1N.AS\" ... #>  $ shortname     : chr  \"Dow Jones Industrial Average\" \"Dow Jones U.S. Completion Total\" \"Dow Jones U.S. Select REIT Inde\" \"Euronext Eurozone 100 ESG NR\" ... #>  $ longname      : chr  \"Dow Jones Industrial Average\" \"Dow Jones U.S. Completion Total\" \"Dow Jones U.S. Select REIT Inde\" \"Euronext Eurozone 100 ESG NR\" ... #>  $ exchange      : chr  \"DJI\" \"DJI\" \"DJI\" \"AMS\" ... #>  $ exchdisp      : chr  \"Dow Jones\" \"Dow Jones\" \"Dow Jones\" \"Amsterdam\" ... #>  $ quotetype     : chr  \"INDEX\" \"INDEX\" \"INDEX\" \"INDEX\" ... #>  $ typedisp      : chr  \"Index\" \"Index\" \"Index\" \"Index\" ... #>  $ score         : num  51005 20280 20174 20005 20005 ... #>  $ isyahoofinance: logi  TRUE TRUE TRUE TRUE TRUE TRUE ... #>  $ searched      : chr  \"dow jones\" \"dow jones\" \"dow jones\" \"euronext\" ... #>  - attr(*, \"date\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE swed_indices <- search_summary( c(\"SAAB\", \"VOLVO\"), exchange = \"STO\")  str(swed_indices) # More or less similar than the previous example + latest values of the day #> 'data.frame':    4 obs. of  7 variables: #>  $ symbol    : chr  \"SAAB-B.ST\" \"VOLCAR-B.ST\" \"VOLV-B.ST\" \"VOLV-A.ST\" #>  $ name      : chr  \"SAAB AB ser. B\" \"Volvo Car AB ser. B\" \"Volvo, AB ser. B\" \"Volvo, AB ser. A\" #>  $ last_price: chr  \"379.40\" \"17.72\" \"245.10\" \"244.80\" #>  $ sector    : chr  \"Industrials\" \"Consumer Cyclical\" \"Industrials\" \"Industrials\" #>  $ type      : chr  \"Stocks\" \"Stocks\" \"Stocks\" \"Stocks\" #>  $ exchange  : chr  \"STO\" \"STO\" \"STO\" \"STO\" #>  $ searched  : chr  \"SAAB\" \"VOLVO\" \"VOLVO\" \"VOLVO\" #>  - attr(*, \"date\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE # Fetch historical values, given ticker symbol(s) histo <- get_historic(c(\"SAAB-B.ST\", \"VOLV-B.ST\"), .verbose = FALSE) # Default interval is daily values.  str(histo) #> 'data.frame':    1020 obs. of  20 variables: #>  $ open                : num  411 410 414 416 418 ... #>  $ close               : num  410 414 416 418 419 ... #>  $ low                 : num  409 409 413 416 417 ... #>  $ high                : num  412 415 418 418 419 ... #>  $ volume              : int  0 36745 56432 18363 43626 34211 51050 34181 45256 36016 ... #>  $ timestamp           : int  1743750000 1743750060 1743750120 1743750180 1743750240 1743750300 1743750360 1743750420 1743750480 1743750540 ... #>  $ date                : POSIXct, format: \"2025-04-04 09:00:00\" \"2025-04-04 09:01:00\" ... #>  $ currency            : chr  \"SEK\" \"SEK\" \"SEK\" \"SEK\" ... #>  $ symbol              : chr  \"SAAB-B.ST\" \"SAAB-B.ST\" \"SAAB-B.ST\" \"SAAB-B.ST\" ... #>  $ shortname           : chr  \"SAAB AB ser. B\" \"SAAB AB ser. B\" \"SAAB AB ser. B\" \"SAAB AB ser. B\" ... #>  $ longname            : chr  \"Saab AB (publ)\" \"Saab AB (publ)\" \"Saab AB (publ)\" \"Saab AB (publ)\" ... #>  $ exchangename        : chr  \"STO\" \"STO\" \"STO\" \"STO\" ... #>  $ fullexchangename    : chr  \"Stockholm\" \"Stockholm\" \"Stockholm\" \"Stockholm\" ... #>  $ timezone            : chr  \"CEST\" \"CEST\" \"CEST\" \"CEST\" ... #>  $ gmtoffset           : int  7200 7200 7200 7200 7200 7200 7200 7200 7200 7200 ... #>  $ regularmarketprice  : num  379 379 379 379 379 ... #>  $ fiftytwoweeklow     : num  204 204 204 204 204 ... #>  $ fiftytwoweekhigh    : num  420 420 420 420 420 420 420 420 420 420 ... #>  $ regularmarketdaylow : num  365 365 365 365 365 365 365 365 365 365 ... #>  $ regularmarketdayhigh: num  420 420 420 420 420 420 420 420 420 420 ... #>  - attr(*, \"n.currencies\")= int 1 #>  - attr(*, \"currencies\")= chr \"SEK\" #>  - attr(*, \"date\")= Date[1:1], format: \"2025-04-06\" #>  - attr(*, \"crypto\")= logi FALSE"},{"path":"https://clement-lvd.github.io/financr/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"An R package for fetching financial data from Yahoo Finance","text":"Get latest financial insights ‘last_’ family functions, e.g., latest values insights major indices, world-indices crypto-currencies. See vignette ‘last_ family’ functions`. Change currencies current exchange rates get historic exchange rates. See Vignette get_changes() get_currencies(). Cascading functionnality. 'financr' offer possibility chain process, e.g., get ticker symbol latest insights keyword(s) company names, get financial historic associated ticker symbol, finally convert values given standardized currency, e.g., ‘USD’. See vignette search_summary() get_historic().","code":""},{"path":"https://clement-lvd.github.io/financr/index.html","id":"licence","dir":"","previous_headings":"","what":"Licence","title":"An R package for fetching financial data from Yahoo Finance","text":"package retrieves data Yahoo Finance, property Yahoo Inc. Users must comply Yahoo Finance’s API terms. See informations legal Vignette.","code":""}]
